Warning: Shuffle Join MERGEJOIN[154][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 8' is a cross product
PREHOOK: query: explain
with ssales as
(select c_last_name
      ,c_first_name
      ,s_store_name
      ,ca_state
      ,s_state
      ,i_color
      ,i_current_price
      ,i_manager_id
      ,i_units
      ,i_size
      ,sum(ss_sales_price) netpaid
from store_sales
    ,store_returns
    ,store
    ,item
    ,customer
    ,customer_address
where ss_ticket_number = sr_ticket_number
  and ss_item_sk = sr_item_sk
  and ss_customer_sk = c_customer_sk
  and ss_item_sk = i_item_sk
  and ss_store_sk = s_store_sk
  and c_birth_country = upper(ca_country)
  and s_zip = ca_zip
and s_market_id=7
group by c_last_name
        ,c_first_name
        ,s_store_name
        ,ca_state
        ,s_state
        ,i_color
        ,i_current_price
        ,i_manager_id
        ,i_units
        ,i_size)
select c_last_name
      ,c_first_name
      ,s_store_name
      ,sum(netpaid) paid
from ssales
where i_color = 'orchid'
group by c_last_name
        ,c_first_name
        ,s_store_name
having sum(netpaid) > (select 0.05*avg(netpaid)
                                 from ssales)
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ssales as
(select c_last_name
      ,c_first_name
      ,s_store_name
      ,ca_state
      ,s_state
      ,i_color
      ,i_current_price
      ,i_manager_id
      ,i_units
      ,i_size
      ,sum(ss_sales_price) netpaid
from store_sales
    ,store_returns
    ,store
    ,item
    ,customer
    ,customer_address
where ss_ticket_number = sr_ticket_number
  and ss_item_sk = sr_item_sk
  and ss_customer_sk = c_customer_sk
  and ss_item_sk = i_item_sk
  and ss_store_sk = s_store_sk
  and c_birth_country = upper(ca_country)
  and s_zip = ca_zip
and s_market_id=7
group by c_last_name
        ,c_first_name
        ,s_store_name
        ,ca_state
        ,s_state
        ,i_color
        ,i_current_price
        ,i_manager_id
        ,i_units
        ,i_size)
select c_last_name
      ,c_first_name
      ,s_store_name
      ,sum(netpaid) paid
from ssales
where i_color = 'orchid'
group by c_last_name
        ,c_first_name
        ,s_store_name
having sum(netpaid) > (select 0.05*avg(netpaid)
                                 from ssales)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Map 18 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Map 16 (SIMPLE_EDGE), Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Map 19 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Map 20 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 16 (SIMPLE_EDGE)
Reducer 3 <- Map 17 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 18 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 19 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Map 20 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 15 (CUSTOM_SIMPLE_EDGE), Reducer 7 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Map 1 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 8
      File Output Operator [FS_91]
        Select Operator [SEL_90] (rows=77303902 width=321)
          Output:["_col0","_col1","_col2","_col3"]
          Filter Operator [FIL_89] (rows=77303902 width=321)
            predicate:(_col3 > _col4)
            Merge Join Operator [MERGEJOIN_154] (rows=231911707 width=321)
              Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4"]
            <-Reducer 15 [CUSTOM_SIMPLE_EDGE] vectorized
              PARTITION_ONLY_SHUFFLE [RS_192]
                Select Operator [SEL_191] (rows=1 width=232)
                  Output:["_col0"]
                  Filter Operator [FIL_349] (rows=1 width=120)
                    predicate:(_col0 is not null and _col1 is not null)
                    Group By Operator [GBY_348] (rows=1 width=120)
                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                    <-Reducer 11 [CUSTOM_SIMPLE_EDGE] vectorized
                      PARTITION_ONLY_SHUFFLE [RS_347]
                        Group By Operator [GBY_346] (rows=1 width=120)
                          Output:["_col0","_col1"],aggregations:["sum(_col10)","count(_col10)"]
                          Select Operator [SEL_345] (rows=576061174 width=932)
                            Output:["_col10"]
                            Group By Operator [GBY_344] (rows=576061174 width=932)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9
                            <-Reducer 10 [SIMPLE_EDGE]
                              SHUFFLE [RS_83]
                                PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                                Group By Operator [GBY_82] (rows=576061174 width=932)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"],aggregations:["sum(_col17)"],keys:_col10, _col11, _col1, _col5, _col6, _col19, _col20, _col21, _col22, _col23
                                  Merge Join Operator [MERGEJOIN_304] (rows=646603814 width=928)
                                    Conds:RS_78._col13, _col16=RS_332._col0, _col1(Inner),Output:["_col1","_col5","_col6","_col10","_col11","_col17","_col19","_col20","_col21","_col22","_col23"]
                                  <-Map 20 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_332]
                                      PartitionCols:_col0, _col1
                                      Select Operator [SEL_330] (rows=57591150 width=8)
                                        Output:["_col0","_col1"]
                                        Filter Operator [FIL_329] (rows=57591150 width=8)
                                          predicate:(sr_ticket_number is not null and sr_item_sk is not null)
                                          TableScan [TS_23] (rows=57591150 width=8)
                                            default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_item_sk","sr_ticket_number"]
                                  <-Reducer 9 [SIMPLE_EDGE]
                                    SHUFFLE [RS_78]
                                      PartitionCols:_col13, _col16
                                      Merge Join Operator [MERGEJOIN_303] (rows=576061174 width=936)
                                        Conds:RS_75._col13=RS_312._col0(Inner),Output:["_col1","_col5","_col6","_col10","_col11","_col13","_col16","_col17","_col19","_col20","_col21","_col22","_col23"]
                                      <-Map 7 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_312]
                                          PartitionCols:_col0
                                          Select Operator [SEL_309] (rows=462000 width=384)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Filter Operator [FIL_307] (rows=462000 width=384)
                                              predicate:i_item_sk is not null
                                              TableScan [TS_3] (rows=462000 width=384)
                                                default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_current_price","i_size","i_color","i_units","i_manager_id"]
                                      <-Reducer 16 [SIMPLE_EDGE]
                                        SHUFFLE [RS_75]
                                          PartitionCols:_col13
                                          Merge Join Operator [MERGEJOIN_302] (rows=576061174 width=555)
                                            Conds:RS_72._col8, _col4=RS_343._col1, _col2(Inner),Output:["_col1","_col5","_col6","_col10","_col11","_col13","_col16","_col17"]
                                          <-Reducer 15 [SIMPLE_EDGE]
                                            SHUFFLE [RS_72]
                                              PartitionCols:_col8, _col4
                                              Filter Operator [FIL_21] (rows=7276996 width=724)
                                                predicate:(_col12 <> _col3)
                                                Merge Join Operator [MERGEJOIN_297] (rows=7276996 width=724)
                                                  Conds:RS_18._col0=RS_328._col1(Inner),Output:["_col1","_col3","_col4","_col5","_col6","_col8","_col10","_col11","_col12"]
                                                <-Map 19 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_328]
                                                    PartitionCols:_col1
                                                    Select Operator [SEL_327] (rows=80000000 width=280)
                                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                                      Filter Operator [FIL_155] (rows=575995635 width=88)
                                                        predicate:(ss_customer_sk is not null and ss_item_sk is not null and ss_store_sk is not null and ss_ticket_number is not null)
                                                        TableScan [TS_0] (rows=575995635 width=88)
                                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_item_sk","ss_customer_sk","ss_store_sk","ss_ticket_number","ss_sales_price"]
                                                <-Map 17 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_168]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_166] (rows=852 width=1910)
                                                      Output:["_col0","_col1","_col3","_col4"]
                                                      Filter Operator [FIL_165] (rows=852 width=1910)
                                                        predicate:((s_market_id = 7) and s_store_sk is not null and s_zip is not null)
                                                        TableScan [TS_6] (rows=1704 width=1910)
                                                          default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_store_name","s_market_id","s_state","s_zip"]
            <-Reducer 7 [CUSTOM_SIMPLE_EDGE] vectorized
              PARTITION_ONLY_SHUFFLE [RS_185]
                Select Operator [SEL_184] (rows=231911707 width=88)
                  Output:["_col0","_col1","_col2","_col3"]
                  Group By Operator [GBY_183] (rows=231911707 width=88)
                    Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col9)"],keys:_col1, _col2, _col7
                    Select Operator [SEL_182] (rows=463823414 width=88)
                      Output:["_col1","_col2","_col7","_col9"]
                      Group By Operator [GBY_181] (rows=463823414 width=88)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8
                      <-Reducer 6 [SIMPLE_EDGE]
                        SHUFFLE [RS_35]
                          PartitionCols:_col0, _col1, _col2
                          Group By Operator [GBY_34] (rows=927646829 width=88)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"],aggregations:["sum(_col4)"],keys:_col17, _col18, _col12, _col22, _col6, _col7, _col9, _col10, _col14
                            Merge Join Operator [MERGEJOIN_148] (rows=927646829 width=88)
                              Conds:RS_30._col15, _col19=RS_179._col1, upper(_col2)(Inner),Output:["_col4","_col6","_col7","_col9","_col10","_col12","_col14","_col17","_col18","_col22"]
                            <-Map 20 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_179]
                                PartitionCols:_col1, upper(_col2)
                                 Please refer to the previous Select Operator [SEL_178]
                            <-Reducer 5 [SIMPLE_EDGE]
                              SHUFFLE [RS_30]
                                PartitionCols:_col15, _col19
                                Merge Join Operator [MERGEJOIN_147] (rows=843315281 width=88)
                                  Conds:RS_27._col0, _col3=RS_175._col0, _col1(Inner),Output:["_col4","_col6","_col7","_col9","_col10","_col12","_col14","_col15","_col17","_col18","_col19"]
                                <-Map 19 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_175]
                                    PartitionCols:_col0, _col1
                                     Please refer to the previous Select Operator [SEL_174]
                                <-Reducer 4 [SIMPLE_EDGE]
                                  SHUFFLE [RS_27]
                                    PartitionCols:_col0, _col3
                                    Merge Join Operator [MERGEJOIN_146] (rows=766650239 width=88)
                                      Conds:RS_24._col1=RS_171._col0(Inner),Output:["_col0","_col3","_col4","_col6","_col7","_col9","_col10","_col12","_col14","_col15","_col17","_col18","_col19"]
                                    <-Map 18 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_171]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_170]
                                    <-Reducer 3 [SIMPLE_EDGE]
                                      SHUFFLE [RS_24]
                                        PartitionCols:_col1
                                        Merge Join Operator [MERGEJOIN_145] (rows=696954748 width=88)
                                          Conds:RS_21._col2=RS_167._col0(Inner),Output:["_col0","_col1","_col3","_col4","_col6","_col7","_col9","_col10","_col12","_col14","_col15"]
                                        <-Map 17 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_167]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_166]
                                        <-Reducer 2 [SIMPLE_EDGE]
                                          SHUFFLE [RS_21]
                                            PartitionCols:_col2
                                            Merge Join Operator [MERGEJOIN_144] (rows=633595212 width=88)
                                              Conds:RS_157._col0=RS_163._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col6","_col7","_col9","_col10"]
                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_157]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_156]
                                            <-Map 16 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_163]
                                                PartitionCols:_col0
                                                Select Operator [SEL_161] (rows=231000 width=1436)
                                                  Output:["_col0","_col1","_col2","_col4","_col5"]
                                                  Filter Operator [FIL_159] (rows=231000 width=1436)
                                                    predicate:((i_color = 'orchid') and i_item_sk is not null)
                                                     Please refer to the previous TableScan [TS_3]

