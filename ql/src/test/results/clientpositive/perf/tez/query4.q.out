PREHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total
       ,'c' sale_type
 from customer
     ,catalog_sales
     ,date_dim
 where c_customer_sk = cs_bill_customer_sk
   and cs_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select  t_s_secyear.customer_preferred_cust_flag
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_c_firstyear
     ,year_total t_c_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
   and t_s_firstyear.customer_id = t_c_secyear.customer_id
   and t_s_firstyear.customer_id = t_c_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_secyear.customer_id
   and t_s_firstyear.sale_type = 's'
   and t_c_firstyear.sale_type = 'c'
   and t_w_firstyear.sale_type = 'w'
   and t_s_secyear.sale_type = 's'
   and t_c_secyear.sale_type = 'c'
   and t_w_secyear.sale_type = 'w'
   and t_s_firstyear.dyear =  2001
   and t_s_secyear.dyear = 2001+1
   and t_c_firstyear.dyear =  2001
   and t_c_secyear.dyear =  2001+1
   and t_w_firstyear.dyear = 2001
   and t_w_secyear.dyear = 2001+1
   and t_s_firstyear.year_total > 0
   and t_c_firstyear.year_total > 0
   and t_w_firstyear.year_total > 0
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
 order by t_s_secyear.customer_preferred_cust_flag
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total
       ,'c' sale_type
 from customer
     ,catalog_sales
     ,date_dim
 where c_customer_sk = cs_bill_customer_sk
   and cs_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select  t_s_secyear.customer_preferred_cust_flag
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_c_firstyear
     ,year_total t_c_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
   and t_s_firstyear.customer_id = t_c_secyear.customer_id
   and t_s_firstyear.customer_id = t_c_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_secyear.customer_id
   and t_s_firstyear.sale_type = 's'
   and t_c_firstyear.sale_type = 'c'
   and t_w_firstyear.sale_type = 'w'
   and t_s_secyear.sale_type = 's'
   and t_c_secyear.sale_type = 'c'
   and t_w_secyear.sale_type = 'w'
   and t_s_firstyear.dyear =  2001
   and t_s_secyear.dyear = 2001+1
   and t_c_firstyear.dyear =  2001
   and t_c_secyear.dyear =  2001+1
   and t_w_firstyear.dyear = 2001
   and t_w_secyear.dyear = 2001+1
   and t_s_firstyear.year_total > 0
   and t_c_firstyear.year_total > 0
   and t_w_firstyear.year_total > 0
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
 order by t_s_secyear.customer_preferred_cust_flag
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 11 <- Map 10 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE)
Reducer 12 <- Map 25 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Map 10 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE)
Reducer 15 <- Map 25 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE)
Reducer 18 <- Map 17 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE)
Reducer 19 <- Map 25 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE)
Reducer 20 <- Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Map 17 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE)
Reducer 22 <- Map 25 (SIMPLE_EDGE), Reducer 21 (SIMPLE_EDGE)
Reducer 23 <- Reducer 22 (SIMPLE_EDGE)
Reducer 3 <- Map 25 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 14 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 18 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 22 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 26 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 30 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_357]
        Limit [LIM_356] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_355] (rows=479156399 width=88)
            Output:["_col0"]
          <-Reducer 5 [SIMPLE_EDGE]
            SHUFFLE [RS_139]
              Select Operator [SEL_138] (rows=479156399 width=88)
                Output:["_col0"]
                Filter Operator [FIL_136] (rows=479156399 width=88)
                  predicate:(CASE WHEN (_col3 is not null) THEN (CASE WHEN (_col5 is not null) THEN (((_col9 / _col5) > (_col12 / _col3))) ELSE ((null > (_col12 / _col3))) END) ELSE (CASE WHEN (_col5 is not null) THEN (((_col9 / _col5) > null)) ELSE (null) END) END and CASE WHEN (_col7 is not null) THEN (CASE WHEN (_col5 is not null) THEN (((_col9 / _col5) > (_col1 / _col7))) ELSE ((null > (_col1 / _col7))) END) ELSE (CASE WHEN (_col5 is not null) THEN (((_col9 / _col5) > null)) ELSE (null) END) END)
                  Merge Join Operator [MERGEJOIN_296] (rows=1916625598 width=88)
                    Conds:RS_325._col0=RS_354._col0(Inner),RS_354._col0=RS_342._col0(Inner),RS_354._col0=RS_330._col0(Inner),RS_354._col0=RS_337._col0(Inner),RS_354._col0=RS_349._col0(Inner),Output:["_col1","_col3","_col5","_col7","_col9","_col11","_col12"]
                  <-Reducer 13 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_337]
                      PartitionCols:_col0
                      Select Operator [SEL_336] (rows=174233858 width=135)
                        Output:["_col0","_col1"]
                        Group By Operator [GBY_335] (rows=174233858 width=135)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                        <-Reducer 12 [SIMPLE_EDGE]
                          SHUFFLE [RS_105]
                            PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                            Group By Operator [GBY_104] (rows=348467716 width=135)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                              Select Operator [SEL_102] (rows=348467716 width=135)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                Merge Join Operator [MERGEJOIN_293] (rows=348467716 width=135)
                                  Conds:RS_99._col1=RS_318._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                <-Map 25 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_318]
                                    PartitionCols:_col0
                                    Select Operator [SEL_316] (rows=80000000 width=860)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                      Filter Operator [FIL_315] (rows=80000000 width=860)
                                        predicate:(c_customer_id is not null and c_customer_sk is not null)
                                        TableScan [TS_114] (rows=80000000 width=860)
                                          default@customer,customer,Tbl:COMPLETE,Col:NONE,Output:["c_customer_sk","c_customer_id","c_first_name","c_last_name","c_preferred_cust_flag","c_birth_country","c_login","c_email_address"]
                                <-Reducer 11 [SIMPLE_EDGE]
                                  SHUFFLE [RS_99]
                                    PartitionCols:_col1
                                    Merge Join Operator [MERGEJOIN_292] (rows=316788826 width=135)
                                      Conds:RS_333._col0=RS_310._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                    <-Map 24 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_310]
                                        PartitionCols:_col0
                                        Select Operator [SEL_305] (rows=36524 width=1119)
                                          Output:["_col0"]
                                          Filter Operator [FIL_301] (rows=36524 width=1119)
                                            predicate:((d_year = 2002) and d_date_sk is not null)
                                            TableScan [TS_111] (rows=73049 width=1119)
                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year"]
                                    <-Map 10 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_333]
                                        PartitionCols:_col0
                                        Select Operator [SEL_332] (rows=287989836 width=135)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                          Filter Operator [FIL_331] (rows=287989836 width=135)
                                            predicate:(cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                                            TableScan [TS_87] (rows=287989836 width=135)
                                              default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_ext_discount_amt","cs_ext_sales_price","cs_ext_wholesale_cost","cs_ext_list_price"]
                  <-Reducer 16 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_342]
                      PartitionCols:_col0
                      Select Operator [SEL_341] (rows=58077952 width=135)
                        Output:["_col0","_col1"]
                        Filter Operator [FIL_340] (rows=58077952 width=135)
                          predicate:(_col7 > 0)
                          Select Operator [SEL_339] (rows=174233858 width=135)
                            Output:["_col0","_col7"]
                            Group By Operator [GBY_338] (rows=174233858 width=135)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                            <-Reducer 15 [SIMPLE_EDGE]
                              SHUFFLE [RS_61]
                                PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                Group By Operator [GBY_60] (rows=348467716 width=135)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                  Select Operator [SEL_58] (rows=348467716 width=135)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                    Merge Join Operator [MERGEJOIN_289] (rows=348467716 width=135)
                                      Conds:RS_55._col1=RS_321._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                    <-Map 25 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_321]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_316]
                                    <-Reducer 14 [SIMPLE_EDGE]
                                      SHUFFLE [RS_55]
                                        PartitionCols:_col1
                                        Merge Join Operator [MERGEJOIN_288] (rows=316788826 width=135)
                                          Conds:RS_334._col0=RS_313._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                        <-Map 24 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_313]
                                            PartitionCols:_col0
                                            Select Operator [SEL_307] (rows=36524 width=1119)
                                              Output:["_col0"]
                                              Filter Operator [FIL_303] (rows=36524 width=1119)
                                                predicate:((d_year = 2001) and d_date_sk is not null)
                                                 Please refer to the previous TableScan [TS_111]
                                        <-Map 10 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_334]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_332]
                  <-Reducer 20 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_349]
                      PartitionCols:_col0
                      Select Operator [SEL_348] (rows=348477374 width=88)
                        Output:["_col0","_col1","_col2"]
                        Group By Operator [GBY_347] (rows=348477374 width=88)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                        <-Reducer 19 [SIMPLE_EDGE]
                          SHUFFLE [RS_126]
                            PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                            Group By Operator [GBY_125] (rows=696954748 width=88)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                              Select Operator [SEL_123] (rows=696954748 width=88)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                Merge Join Operator [MERGEJOIN_295] (rows=696954748 width=88)
                                  Conds:RS_120._col1=RS_317._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                <-Map 25 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_317]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_316]
                                <-Reducer 18 [SIMPLE_EDGE]
                                  SHUFFLE [RS_120]
                                    PartitionCols:_col1
                                    Merge Join Operator [MERGEJOIN_294] (rows=633595212 width=88)
                                      Conds:RS_345._col0=RS_309._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                    <-Map 24 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_309]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_305]
                                    <-Map 17 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_345]
                                        PartitionCols:_col0
                                        Select Operator [SEL_344] (rows=575995635 width=88)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                          Filter Operator [FIL_343] (rows=575995635 width=88)
                                            predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                            TableScan [TS_108] (rows=575995635 width=88)
                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_discount_amt","ss_ext_sales_price","ss_ext_wholesale_cost","ss_ext_list_price"]
                  <-Reducer 23 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_354]
                      PartitionCols:_col0
                      Select Operator [SEL_353] (rows=116159124 width=88)
                        Output:["_col0","_col1"]
                        Filter Operator [FIL_352] (rows=116159124 width=88)
                          predicate:(_col7 > 0)
                          Select Operator [SEL_351] (rows=348477374 width=88)
                            Output:["_col0","_col7"]
                            Group By Operator [GBY_350] (rows=348477374 width=88)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                            <-Reducer 22 [SIMPLE_EDGE]
                              SHUFFLE [RS_39]
                                PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                Group By Operator [GBY_38] (rows=696954748 width=88)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                  Select Operator [SEL_36] (rows=696954748 width=88)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                    Filter Operator [FIL_510] (rows=80000000 width=656)
                                      predicate:(c_customer_sk is not null and c_customer_id is not null)
                                      TableScan [TS_109] (rows=80000000 width=656)
                                        default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_customer_id","c_first_name","c_last_name","c_preferred_cust_flag","c_birth_country","c_login","c_email_address"]
                              <-Reducer 28 [SIMPLE_EDGE]
                                SHUFFLE [RS_115]
                                  PartitionCols:_col1
                                  Merge Join Operator [MERGEJOIN_466] (rows=187573258 width=115)
                                    Conds:RS_563._col0=RS_481._col0(Inner),Output:["_col1","_col2"]
                                  <-Map 31 [SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_481]
                                      PartitionCols:_col0
                                      Select Operator [SEL_477] (rows=652 width=4)
                                        Output:["_col0"]
                                        Filter Operator [FIL_473] (rows=652 width=8)
                                          predicate:((d_year = 2002) and d_date_sk is not null)
                                          TableScan [TS_106] (rows=73049 width=8)
                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                  <-Map 27 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_563]
                                      PartitionCols:_col0
                                      Select Operator [SEL_562] (rows=525327388 width=119)
                                        Output:["_col0","_col1","_col2"]
                                        Filter Operator [FIL_561] (rows=525327388 width=435)
                                          predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_113_date_dim_d_date_sk_min) AND DynamicValue(RS_113_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_113_date_dim_d_date_sk_bloom_filter)))
                                          TableScan [TS_103] (rows=575995635 width=435)
                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_discount_amt","ss_ext_sales_price","ss_ext_wholesale_cost","ss_ext_list_price"]
                                          <-Reducer 32 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_560]
                                              Group By Operator [GBY_559] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                              <-Map 31 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_499]
                                                  Group By Operator [GBY_493] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                    Select Operator [SEL_482] (rows=652 width=4)
                                                      Output:["_col0"]
                                                       Please refer to the previous Select Operator [SEL_477]
                  <-Reducer 8 [SIMPLE_EDGE]
                    SHUFFLE [RS_136]
                      PartitionCols:_col2
                      Filter Operator [FIL_135] (rows=12248093 width=668)
                        predicate:CASE WHEN (_col6) THEN (CASE WHEN (_col9) THEN (((_col11 / _col8) > (_col1 / _col5))) ELSE (false) END) ELSE (false) END
                        Merge Join Operator [MERGEJOIN_471] (rows=24496186 width=668)
                          Conds:RS_132._col2=RS_558._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6","_col8","_col9","_col11"]
                        <-Reducer 26 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_558]
                            PartitionCols:_col0
                            Select Operator [SEL_557] (rows=80000000 width=212)
                              Output:["_col0","_col1"]
                              Group By Operator [GBY_556] (rows=80000000 width=764)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                              <-Reducer 25 [SIMPLE_EDGE]
                                SHUFFLE [RS_100]
                                  PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                  Group By Operator [GBY_99] (rows=80000000 width=764)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col2)"],keys:_col5, _col6, _col7, _col8, _col9, _col10, _col11
                                    Merge Join Operator [MERGEJOIN_465] (rows=101084444 width=764)
                                      Conds:RS_95._col1=RS_513._col0(Inner),Output:["_col2","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                    <-Map 38 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_513]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_316]
                                    <-Reducer 21 [SIMPLE_EDGE]
                                      SHUFFLE [RS_33]
                                        PartitionCols:_col1
                                        Merge Join Operator [MERGEJOIN_286] (rows=633595212 width=88)
                                          Conds:RS_346._col0=RS_312._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                        <-Map 24 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_312]
                                            PartitionCols:_col0
                                            Select Operator [SEL_306] (rows=36524 width=1119)
                                              Output:["_col0"]
                                              Filter Operator [FIL_302] (rows=36524 width=1119)
                                                predicate:((d_year = 2001) and d_date_sk is not null)
                                                 Please refer to the previous TableScan [TS_111]
                                        <-Map 17 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_346]
                                            PartitionCols:_col0
                                            Select Operator [SEL_554] (rows=285117831 width=119)
                                              Output:["_col0","_col1","_col2"]
                                              Filter Operator [FIL_553] (rows=285117831 width=453)
                                                predicate:(cs_sold_date_sk is not null and cs_bill_customer_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_93_date_dim_d_date_sk_min) AND DynamicValue(RS_93_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_93_date_dim_d_date_sk_bloom_filter)))
                                                TableScan [TS_83] (rows=287989836 width=453)
                                                  default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_ext_discount_amt","cs_ext_sales_price","cs_ext_wholesale_cost","cs_ext_list_price"]
                                                <-Reducer 33 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_552]
                                                    Group By Operator [GBY_551] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Map 31 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_500]
                                                        Group By Operator [GBY_494] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_484] (rows=652 width=4)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_477]
                        <-Reducer 7 [SIMPLE_EDGE]
                          SHUFFLE [RS_132]
                            PartitionCols:_col2
                            Merge Join Operator [MERGEJOIN_470] (rows=20485011 width=556)
                              Conds:RS_129._col2=RS_550._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6","_col8","_col9"]
                            <-Reducer 22 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_550]
                                PartitionCols:_col0
                                Select Operator [SEL_549] (rows=26666666 width=216)
                                  Output:["_col0","_col1","_col2"]
                                  Filter Operator [FIL_548] (rows=26666666 width=212)
                                    predicate:(_col7 > 0)
                                    Select Operator [SEL_547] (rows=80000000 width=212)
                                      Output:["_col0","_col7"]
                                      Group By Operator [GBY_546] (rows=80000000 width=764)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                      <-Reducer 21 [SIMPLE_EDGE]
                                        SHUFFLE [RS_79]
                                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                          Group By Operator [GBY_78] (rows=80000000 width=764)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col2)"],keys:_col5, _col6, _col7, _col8, _col9, _col10, _col11
                                            Merge Join Operator [MERGEJOIN_463] (rows=101084444 width=764)
                                              Conds:RS_74._col1=RS_517._col0(Inner),Output:["_col2","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                            <-Map 38 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_517]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_511]
                                            <-Reducer 20 [SIMPLE_EDGE]
                                              SHUFFLE [RS_74]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_462] (rows=101084444 width=115)
                                                  Conds:RS_545._col0=RS_491._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 31 [SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_491]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_480] (rows=652 width=4)
                                                      Output:["_col0"]
                                                      Filter Operator [FIL_476] (rows=652 width=8)
                                                        predicate:((d_year = 2001) and d_date_sk is not null)
                                                         Please refer to the previous TableScan [TS_106]
                                                <-Map 19 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_545]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_544] (rows=285117831 width=119)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_543] (rows=285117831 width=453)
                                                        predicate:(cs_sold_date_sk is not null and cs_bill_customer_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_72_date_dim_d_date_sk_min) AND DynamicValue(RS_72_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_72_date_dim_d_date_sk_bloom_filter)))
                                                        TableScan [TS_62] (rows=287989836 width=453)
                                                          default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_ext_discount_amt","cs_ext_sales_price","cs_ext_wholesale_cost","cs_ext_list_price"]
                                                        <-Reducer 37 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_542]
                                                            Group By Operator [GBY_541] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 31 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_504]
                                                                Group By Operator [GBY_498] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_492] (rows=652 width=4)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_480]
                            <-Reducer 6 [SIMPLE_EDGE]
                              SHUFFLE [RS_129]
                                PartitionCols:_col2
                                Merge Join Operator [MERGEJOIN_469] (rows=20485011 width=440)
                                  Conds:RS_126._col2=RS_540._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6"]
                                <-Reducer 18 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_540]
                                    PartitionCols:_col0
                                    Select Operator [SEL_539] (rows=17130654 width=216)
                                      Output:["_col0","_col1","_col2"]
                                      Filter Operator [FIL_538] (rows=17130654 width=212)
                                        predicate:(_col7 > 0)
                                        Select Operator [SEL_537] (rows=51391963 width=212)
                                          Output:["_col0","_col7"]
                                          Group By Operator [GBY_536] (rows=51391963 width=764)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                          <-Reducer 17 [SIMPLE_EDGE]
                                            SHUFFLE [RS_58]
                                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                              Group By Operator [GBY_57] (rows=51391963 width=764)
                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col2)"],keys:_col5, _col6, _col7, _col8, _col9, _col10, _col11
                                                Merge Join Operator [MERGEJOIN_461] (rows=51391963 width=764)
                                                  Conds:RS_53._col1=RS_516._col0(Inner),Output:["_col2","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                                <-Map 38 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_516]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_511]
                                                <-Reducer 16 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_53]
                                                    PartitionCols:_col1
                                                    Merge Join Operator [MERGEJOIN_460] (rows=51391963 width=115)
                                                      Conds:RS_535._col0=RS_489._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 31 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_489]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_479] (rows=652 width=4)
                                                          Output:["_col0"]
                                                          Filter Operator [FIL_475] (rows=652 width=8)
                                                            predicate:((d_year = 2001) and d_date_sk is not null)
                                                             Please refer to the previous TableScan [TS_106]
                                                    <-Map 15 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_535]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_534] (rows=143930993 width=119)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_533] (rows=143930993 width=455)
                                                            predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_51_date_dim_d_date_sk_min) AND DynamicValue(RS_51_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_51_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_41] (rows=144002668 width=455)
                                                              default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_ext_discount_amt","ws_ext_sales_price","ws_ext_wholesale_cost","ws_ext_list_price"]
                                                            <-Reducer 36 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_532]
                                                                Group By Operator [GBY_531] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 31 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_503]
                                                                    Group By Operator [GBY_497] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_490] (rows=652 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_479]
                                <-Reducer 5 [SIMPLE_EDGE]
                                  SHUFFLE [RS_126]
                                    PartitionCols:_col2
                                    Merge Join Operator [MERGEJOIN_468] (rows=31888273 width=324)
                                      Conds:RS_520._col0=RS_530._col0(Inner),Output:["_col1","_col2","_col3"]
                                    <-Reducer 14 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_530]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_305]
                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_299]
                                        PartitionCols:_col0
                                        Select Operator [SEL_298] (rows=144002668 width=135)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                          Filter Operator [FIL_297] (rows=144002668 width=135)
                                            predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                            TableScan [TS_0] (rows=144002668 width=135)
                                              default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_ext_discount_amt","ws_ext_sales_price","ws_ext_wholesale_cost","ws_ext_list_price"]
                  <-Reducer 9 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_330]
                      PartitionCols:_col0
                      Select Operator [SEL_329] (rows=29040539 width=135)
                        Output:["_col0","_col1"]
                        Filter Operator [FIL_328] (rows=29040539 width=135)
                          predicate:(_col7 > 0)
                          Select Operator [SEL_327] (rows=87121617 width=135)
                            Output:["_col0","_col7"]
                            Group By Operator [GBY_326] (rows=87121617 width=135)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                            <-Reducer 8 [SIMPLE_EDGE]
                              SHUFFLE [RS_83]
                                PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                Group By Operator [GBY_82] (rows=174243235 width=135)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                  Select Operator [SEL_80] (rows=174243235 width=135)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                    Merge Join Operator [MERGEJOIN_291] (rows=174243235 width=135)
                                      Conds:RS_77._col1=RS_322._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                    <-Map 25 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_322]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_316]
                                    <-Reducer 7 [SIMPLE_EDGE]
                                      SHUFFLE [RS_77]
                                        PartitionCols:_col1
                                        Merge Join Operator [MERGEJOIN_290] (rows=158402938 width=135)
                                          Conds:RS_300._col0=RS_314._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                        <-Map 24 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_314]
                                            PartitionCols:_col0
                                            Select Operator [SEL_308] (rows=36524 width=1119)
                                              Output:["_col0"]
                                              Filter Operator [FIL_304] (rows=36524 width=1119)
                                                predicate:((d_year = 2001) and d_date_sk is not null)
                                                 Please refer to the previous TableScan [TS_111]
                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_300]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_298]

