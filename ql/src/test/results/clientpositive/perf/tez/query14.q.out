Warning: Shuffle Join MERGEJOIN[1455][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 5' is a cross product
Warning: Shuffle Join MERGEJOIN[1468][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 12' is a cross product
Warning: Shuffle Join MERGEJOIN[1481][tables = [$hdt$_2, $hdt$_3, $hdt$_1]] in Stage 'Reducer 16' is a cross product
PREHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 11 (BROADCAST_EDGE)
Map 46 <- Reducer 49 (BROADCAST_EDGE)
Map 64 <- Reducer 51 (BROADCAST_EDGE)
Map 65 <- Reducer 53 (BROADCAST_EDGE)
Map 66 <- Reducer 57 (BROADCAST_EDGE)
Map 67 <- Reducer 72 (BROADCAST_EDGE)
Map 73 <- Reducer 78 (BROADCAST_EDGE)
Map 79 <- Reducer 17 (BROADCAST_EDGE)
Map 80 <- Reducer 23 (BROADCAST_EDGE)
Reducer 11 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 10 (SIMPLE_EDGE), Map 79 (SIMPLE_EDGE)
Reducer 13 <- Map 24 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE), Reducer 33 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (CUSTOM_SIMPLE_EDGE), Reducer 60 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 17 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Map 10 (SIMPLE_EDGE), Map 80 (SIMPLE_EDGE)
Reducer 19 <- Map 24 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 10 (SIMPLE_EDGE)
Reducer 20 <- Reducer 19 (SIMPLE_EDGE), Reducer 37 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (CUSTOM_SIMPLE_EDGE), Reducer 63 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 23 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 25 <- Map 24 (SIMPLE_EDGE), Reducer 29 (SIMPLE_EDGE)
Reducer 26 <- Map 24 (SIMPLE_EDGE), Reducer 47 (SIMPLE_EDGE)
Reducer 27 <- Reducer 26 (SIMPLE_EDGE), Union 28 (CONTAINS)
Reducer 29 <- Union 28 (SIMPLE_EDGE)
Reducer 3 <- Map 24 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Reducer 26 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 32 <- Union 31 (SIMPLE_EDGE)
Reducer 33 <- Map 24 (SIMPLE_EDGE), Reducer 32 (SIMPLE_EDGE)
Reducer 34 <- Reducer 26 (SIMPLE_EDGE), Union 35 (CONTAINS)
Reducer 36 <- Union 35 (SIMPLE_EDGE)
Reducer 37 <- Map 24 (SIMPLE_EDGE), Reducer 36 (SIMPLE_EDGE)
Reducer 38 <- Map 24 (SIMPLE_EDGE), Reducer 50 (SIMPLE_EDGE)
Reducer 39 <- Reducer 38 (SIMPLE_EDGE), Union 28 (CONTAINS)
Reducer 4 <- Reducer 25 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 40 <- Reducer 38 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 41 <- Reducer 38 (SIMPLE_EDGE), Union 35 (CONTAINS)
Reducer 42 <- Map 24 (SIMPLE_EDGE), Reducer 52 (SIMPLE_EDGE)
Reducer 43 <- Reducer 42 (SIMPLE_EDGE), Union 28 (CONTAINS)
Reducer 44 <- Reducer 42 (SIMPLE_EDGE), Union 31 (CONTAINS)
Reducer 45 <- Reducer 42 (SIMPLE_EDGE), Union 35 (CONTAINS)
Reducer 47 <- Map 46 (SIMPLE_EDGE), Map 48 (SIMPLE_EDGE)
Reducer 49 <- Map 48 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 50 <- Map 48 (SIMPLE_EDGE), Map 64 (SIMPLE_EDGE)
Reducer 51 <- Map 48 (CUSTOM_SIMPLE_EDGE)
Reducer 52 <- Map 48 (SIMPLE_EDGE), Map 65 (SIMPLE_EDGE)
Reducer 53 <- Map 48 (CUSTOM_SIMPLE_EDGE)
Reducer 54 <- Map 48 (SIMPLE_EDGE), Map 66 (SIMPLE_EDGE), Union 55 (CONTAINS)
Reducer 56 <- Union 55 (CUSTOM_SIMPLE_EDGE)
Reducer 57 <- Map 48 (CUSTOM_SIMPLE_EDGE)
Reducer 58 <- Map 48 (SIMPLE_EDGE), Map 66 (SIMPLE_EDGE), Union 59 (CONTAINS)
Reducer 6 <- Reducer 5 (CUSTOM_SIMPLE_EDGE), Reducer 56 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 60 <- Union 59 (CUSTOM_SIMPLE_EDGE)
Reducer 61 <- Map 48 (SIMPLE_EDGE), Map 66 (SIMPLE_EDGE), Union 62 (CONTAINS)
Reducer 63 <- Union 62 (CUSTOM_SIMPLE_EDGE)
Reducer 68 <- Map 67 (SIMPLE_EDGE), Map 71 (SIMPLE_EDGE), Union 55 (CONTAINS)
Reducer 69 <- Map 67 (SIMPLE_EDGE), Map 71 (SIMPLE_EDGE), Union 59 (CONTAINS)
Reducer 70 <- Map 67 (SIMPLE_EDGE), Map 71 (SIMPLE_EDGE), Union 62 (CONTAINS)
Reducer 72 <- Map 71 (CUSTOM_SIMPLE_EDGE)
Reducer 74 <- Map 73 (SIMPLE_EDGE), Map 77 (SIMPLE_EDGE), Union 55 (CONTAINS)
Reducer 75 <- Map 73 (SIMPLE_EDGE), Map 77 (SIMPLE_EDGE), Union 59 (CONTAINS)
Reducer 76 <- Map 73 (SIMPLE_EDGE), Map 77 (SIMPLE_EDGE), Union 62 (CONTAINS)
Reducer 78 <- Map 77 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Union 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 8 vectorized
      File Output Operator [FS_1743]
        Limit [LIM_1742] (rows=100 width=237)
          Number of rows:100
          Select Operator [SEL_1741] (rows=1016388080 width=237)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 7 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_1740]
              Select Operator [SEL_1739] (rows=1016388080 width=237)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                Group By Operator [GBY_1738] (rows=1016388080 width=237)
                  Output:["_col0","_col1","_col2","_col3","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                <-Union 6 [SIMPLE_EDGE]
                  <-Reducer 12 [CONTAINS]
                    Reduce Output Operator [RS_1474]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1473] (rows=2032776160 width=237)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1472] (rows=406555232 width=237)
                          keys:_col0, _col1, _col2, _col3, 0L,sort order:+++++,top n:100
                          Select Operator [SEL_1470] (rows=116155905 width=264)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1181] (rows=1 width=244)
                              predicate:(_col3 > _col5)
                              Merge Join Operator [MERGEJOIN_1180] (rows=1 width=244)
                                Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              <-Reducer 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1358]
                                  Filter Operator [FIL_1357] (rows=1 width=132)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1356] (rows=1 width=132)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 14 [SIMPLE_EDGE]
                                      SHUFFLE [RS_244]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_243] (rows=1 width=132)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_241] (rows=1 width=128)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1168] (rows=1 width=128)
                                              Conds:RS_238._col1=RS_239._col0(Left Semi),Output:["_col2","_col3","_col6","_col7","_col8"]
                                            <-Reducer 13 [SIMPLE_EDGE]
                                              SHUFFLE [RS_238]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_1144] (rows=7790806 width=110)
                                                  Conds:RS_233._col1=RS_1326._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                <-Map 24 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1326]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1615]
                                                <-Map 43 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1863]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_1861] (rows=575995635 width=88)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_1860] (rows=575995635 width=88)
                                                        predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_52_date_dim_d_date_sk_min) AND DynamicValue(RS_52_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_52_date_dim_d_date_sk_bloom_filter))) and ss_sold_date_sk is not null)
                                                        TableScan [TS_45] (rows=575995635 width=88)
                                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_quantity","ss_list_price"]
                                                        <-Reducer 109 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_1859]
                                                            Group By Operator [GBY_1858] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 102 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_1639]
                                                                Group By Operator [GBY_1634] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_1625] (rows=73049 width=1119)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_1615]
                              <-Reducer 57 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1772]
                                  Group By Operator [GBY_1771] (rows=348467716 width=135)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 56 [SIMPLE_EDGE]
                                    SHUFFLE [RS_369]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_368] (rows=696935432 width=135)
                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                        Select Operator [SEL_366] (rows=696935432 width=135)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Merge Join Operator [MERGEJOIN_1430] (rows=696935432 width=135)
                                            Conds:RS_362._col1=RS_1703._col0(Inner),RS_362._col1=RS_1762._col0(Inner),Output:["_col2","_col3","_col8","_col9","_col10"]
                                          <-Map 63 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_1703]
                                              PartitionCols:_col0
                                              Select Operator [SEL_1687] (rows=462000 width=1436)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                Filter Operator [FIL_1678] (rows=462000 width=1436)
                                                  predicate:i_item_sk is not null
                                                  TableScan [TS_91] (rows=462000 width=1436)
                                                    default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                          <-Reducer 80 [ONE_TO_ONE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_1762]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_1761] (rows=254100 width=1436)
                                                Output:["_col0"],keys:KEY._col0
                                              <-Reducer 79 [SIMPLE_EDGE]
                                                SHUFFLE [RS_356]
                                                  PartitionCols:_col0
                                                  Group By Operator [GBY_355] (rows=508200 width=1436)
                                                    Output:["_col0"],keys:_col0
                                                    Merge Join Operator [MERGEJOIN_1429] (rows=508200 width=1436)
                                                      Conds:RS_1699._col1, _col2, _col3=RS_1760._col0, _col1, _col2(Inner),Output:["_col0"]
                                                    <-Map 63 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_1699]
                                                        PartitionCols:_col1, _col2, _col3
                                                        Select Operator [SEL_1683] (rows=462000 width=1436)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1349] (rows=286549727 width=123)
                                                            predicate:(cs_sold_date_sk is not null and cs_item_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_231_date_dim_d_date_sk_min) AND DynamicValue(RS_231_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_231_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_146] (rows=287989836 width=123)
                                                              default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                                            <-Reducer 17 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1348]
                                                                Group By Operator [GBY_1347] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_1296]
                                                                    Group By Operator [GBY_1293] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1289] (rows=50 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1285]
                                            <-Reducer 33 [SIMPLE_EDGE]
                                              SHUFFLE [RS_239]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_237] (rows=364 width=4)
                                                  Output:["_col0"],keys:_col0
                                                  Merge Join Operator [MERGEJOIN_1151] (rows=729 width=4)
                                                    Conds:RS_1327._col1, _col2, _col3=RS_1355._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 24 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1327]
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1318] (rows=458612 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1309] (rows=458612 width=15)
                                                          predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                           Please refer to the previous TableScan [TS_6]
                                                  <-Reducer 32 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1355]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1354] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1353] (rows=1 width=20)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1352] (rows=120960 width=19)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 31 [SIMPLE_EDGE]
                                                            <-Reducer 30 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1409]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1408] (rows=120960 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1407] (rows=120960 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 26 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_175]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_28] (rows=120960 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_1134] (rows=14628613 width=11)
                                                                          Conds:RS_24._col1=RS_1323._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 24 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1323]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1314] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1305] (rows=458612 width=15)
                                                                                predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                 Please refer to the previous TableScan [TS_6]
                                                                        <-Reducer 47 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_24]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_1133] (rows=14736682 width=4)
                                                                              Conds:RS_1403._col0=RS_1381._col0(Inner),Output:["_col1"]
                                                                            <-Map 48 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1381]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1380] (rows=1957 width=4)
                                                                                  Output:["_col0"]
                                                                                  Filter Operator [FIL_1379] (rows=1957 width=8)
                                                                                    predicate:(d_year BETWEEN 1999 AND 2001 and d_date_sk is not null)
                                                                                    TableScan [TS_15] (rows=73049 width=8)
                                                                                      default@date_dim,d1,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                                            <-Map 46 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1403]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1402] (rows=550076554 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1401] (rows=550076554 width=7)
                                                                                    predicate:(ss_sold_date_sk is not null and ss_item_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_22_d1_d_date_sk_min) AND DynamicValue(RS_22_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_22_d1_d_date_sk_bloom_filter)))
                                                                                    TableScan [TS_12] (rows=575995635 width=7)
                                                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk"]
                                                                                    <-Reducer 49 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1400]
                                                                                        Group By Operator [GBY_1399] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 48 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          SHUFFLE [RS_1395]
                                                                                            Group By Operator [GBY_1391] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1382] (rows=1957 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1380]
                                                            <-Reducer 40 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1423]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1422] (rows=120960 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1421] (rows=120960 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 38 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_195]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_48] (rows=120960 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_1136] (rows=7620440 width=11)
                                                                          Conds:RS_44._col1=RS_1324._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 24 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1324]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1315] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1306] (rows=458612 width=15)
                                                                                predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                 Please refer to the previous TableScan [TS_6]
                                                                        <-Reducer 50 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_44]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_1135] (rows=7676736 width=4)
                                                                              Conds:RS_1417._col0=RS_1383._col0(Inner),Output:["_col1"]
                                                                            <-Map 48 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1383]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Select Operator [SEL_1380]
                                                                            <-Map 64 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1417]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1416] (rows=286549727 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1415] (rows=286549727 width=7)
                                                                                    predicate:(cs_sold_date_sk is not null and cs_item_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_42_d2_d_date_sk_min) AND DynamicValue(RS_42_d2_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_42_d2_d_date_sk_bloom_filter)))
                                                                                    TableScan [TS_32] (rows=287989836 width=7)
                                                                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk"]
                                                                                    <-Reducer 51 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1414]
                                                                                        Group By Operator [GBY_1413] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 48 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          SHUFFLE [RS_1396]
                                                                                            Group By Operator [GBY_1392] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1384] (rows=1957 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1380]
                                                            <-Reducer 44 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1437]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1436] (rows=120960 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1435] (rows=120960 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 42 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_216]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_69] (rows=120960 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_1138] (rows=3828623 width=11)
                                                                          Conds:RS_65._col1=RS_1325._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 24 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1325]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1316] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1307] (rows=458612 width=15)
                                                                                predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                 Please refer to the previous TableScan [TS_6]
                                                                        <-Reducer 52 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_65]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_1137] (rows=3856907 width=4)
                                                                              Conds:RS_1431._col0=RS_1385._col0(Inner),Output:["_col1"]
                                                                            <-Map 48 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1385]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Select Operator [SEL_1380]
                                                                            <-Map 65 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1431]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1430] (rows=143966864 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1429] (rows=143966864 width=7)
                                                                                    predicate:(ws_sold_date_sk is not null and ws_item_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_63_d3_d_date_sk_min) AND DynamicValue(RS_63_d3_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_63_d3_d_date_sk_bloom_filter)))
                                                                                    TableScan [TS_53] (rows=144002668 width=7)
                                                                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk"]
                                                                                    <-Reducer 53 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1428]
                                                                                        Group By Operator [GBY_1427] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 48 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          SHUFFLE [RS_1397]
                                                                                            Group By Operator [GBY_1393] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1386] (rows=1957 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1380]
                              <-Reducer 60 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1362]
                                  Select Operator [SEL_1361] (rows=1 width=112)
                                    Output:["_col0"]
                                    Filter Operator [FIL_1360] (rows=1 width=120)
                                      predicate:(_col0 is not null and _col1 is not null)
                                      Group By Operator [GBY_1359] (rows=1 width=120)
                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                      <-Union 59 [CUSTOM_SIMPLE_EDGE]
                                        <-Reducer 58 [CONTAINS]
                                          Reduce Output Operator [RS_1241]
                                            Group By Operator [GBY_1240] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1239] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1237] (rows=14736682 width=0)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1236] (rows=14736682 width=0)
                                                    Conds:RS_1446._col0=RS_1389._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 48 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1389]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1380]
                                                  <-Map 66 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1446]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1444] (rows=550076554 width=114)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1443] (rows=550076554 width=114)
                                                          predicate:(ss_sold_date_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_109_date_dim_d_date_sk_min) AND DynamicValue(RS_109_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_109_date_dim_d_date_sk_bloom_filter)))
                                                          TableScan [TS_102] (rows=575995635 width=114)
                                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_quantity","ss_list_price"]
                                                          <-Reducer 57 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_1442]
                                                              Group By Operator [GBY_1441] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 48 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_1398]
                                                                  Group By Operator [GBY_1394] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_1388] (rows=1957 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_1380]
                                        <-Reducer 69 [CONTAINS]
                                          Reduce Output Operator [RS_1259]
                                            Group By Operator [GBY_1258] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1257] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1255] (rows=7676736 width=94)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1254] (rows=7676736 width=94)
                                                    Conds:RS_1461._col0=RS_1452._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 71 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1452]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1449] (rows=1957 width=4)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_1448] (rows=1957 width=8)
                                                          predicate:(d_year BETWEEN 1998 AND 2000 and d_date_sk is not null)
                                                          TableScan [TS_115] (rows=73049 width=8)
                                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                  <-Map 67 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1461]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1459] (rows=286549727 width=119)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1458] (rows=286549727 width=119)
                                                          predicate:(cs_sold_date_sk is not null and cs_sold_date_sk BETWEEN DynamicValue(RS_119_date_dim_d_date_sk_min) AND DynamicValue(RS_119_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_119_date_dim_d_date_sk_bloom_filter)))
                                                          TableScan [TS_112] (rows=287989836 width=119)
                                                            default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_quantity","cs_list_price"]
                                                          <-Reducer 72 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_1457]
                                                              Group By Operator [GBY_1456] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 71 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_1455]
                                                                  Group By Operator [GBY_1454] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_1451] (rows=1957 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_1449]
                                        <-Reducer 75 [CONTAINS]
                                          Reduce Output Operator [RS_1277]
                                            Group By Operator [GBY_1276] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1275] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1273] (rows=3856907 width=114)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1272] (rows=3856907 width=114)
                                                    Conds:RS_1476._col0=RS_1467._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 77 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1467]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1464] (rows=1957 width=4)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_1463] (rows=1957 width=8)
                                                          predicate:(d_year BETWEEN 1998 AND 2000 and d_date_sk is not null)
                                                          TableScan [TS_126] (rows=73049 width=8)
                                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                  <-Map 73 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1476]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1474] (rows=143966864 width=119)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1473] (rows=143966864 width=119)
                                                          predicate:(ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_130_date_dim_d_date_sk_min) AND DynamicValue(RS_130_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_130_date_dim_d_date_sk_bloom_filter)))
                                                          TableScan [TS_123] (rows=144002668 width=119)
                                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_quantity","ws_list_price"]
                                                          <-Reducer 78 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_1472]
                                                              Group By Operator [GBY_1471] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 77 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_1470]
                                                                  Group By Operator [GBY_1469] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_1466] (rows=1957 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_1464]
                  <-Reducer 22 [CONTAINS]
                    Reduce Output Operator [RS_1193]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1486] (rows=2032776160 width=237)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1485] (rows=406555232 width=237)
                          keys:_col0, _col1, _col2, _col3, 0L,sort order:+++++,top n:100
                          Select Operator [SEL_1483] (rows=58081078 width=264)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1188] (rows=1 width=244)
                              predicate:(_col3 > _col5)
                              Merge Join Operator [MERGEJOIN_1187] (rows=1 width=244)
                                Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              <-Reducer 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1374]
                                  Filter Operator [FIL_1373] (rows=1 width=132)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1372] (rows=1 width=132)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 20 [SIMPLE_EDGE]
                                      SHUFFLE [RS_391]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_390] (rows=1 width=132)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_388] (rows=1 width=128)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1169] (rows=1 width=128)
                                              Conds:RS_385._col1=RS_386._col0(Left Semi),Output:["_col2","_col3","_col6","_col7","_col8"]
                                            <-Reducer 19 [SIMPLE_EDGE]
                                              SHUFFLE [RS_385]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_1156] (rows=3942084 width=130)
                                                  Conds:RS_380._col1=RS_1328._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                <-Map 24 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1328]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1826]
                                      <-Reducer 42 [CONTAINS]
                                        Reduce Output Operator [RS_1559]
                                          Group By Operator [GBY_1558] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                            Select Operator [SEL_1557] (rows=1108786976 width=108)
                                              Output:["_col0"]
                                              Select Operator [SEL_1555] (rows=158402938 width=135)
                                                Output:["_col0","_col1"]
                                                Merge Join Operator [MERGEJOIN_1554] (rows=158402938 width=135)
                                                  Conds:RS_1857._col0=RS_1839._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 37 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1839]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1831]
                                                <-Map 48 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1857]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1854]
                                      <-Reducer 46 [CONTAINS]
                                        Reduce Output Operator [RS_1577]
                                          Group By Operator [GBY_1576] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                            Select Operator [SEL_1575] (rows=1108786976 width=108)
                                              Output:["_col0"]
                                              Select Operator [SEL_1573] (rows=633595212 width=88)
                                                Output:["_col0","_col1"]
                                                Merge Join Operator [MERGEJOIN_1572] (rows=633595212 width=88)
                                                  Conds:RS_1864._col0=RS_1629._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 102 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1629]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1615]
                                                <-Map 43 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1864]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1861]
                              <-Reducer 61 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1801]
                                  Group By Operator [GBY_1800] (rows=174243235 width=135)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 60 [SIMPLE_EDGE]
                                    SHUFFLE [RS_559]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_558] (rows=348486471 width=135)
                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                        Select Operator [SEL_556] (rows=348486471 width=135)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Merge Join Operator [MERGEJOIN_1445] (rows=348486471 width=135)
                                            Conds:RS_552._col1=RS_1706._col0(Inner),RS_552._col1=RS_1791._col0(Inner),Output:["_col2","_col3","_col8","_col9","_col10"]
                                          <-Map 63 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_1706]
                                              PartitionCols:_col0
                                              Select Operator [SEL_1689] (rows=462000 width=1436)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                Filter Operator [FIL_1680] (rows=462000 width=1436)
                                                  predicate:i_item_sk is not null
                                                   Please refer to the previous TableScan [TS_91]
                                          <-Reducer 90 [ONE_TO_ONE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_1791]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_1790] (rows=254100 width=1436)
                                                Output:["_col0"],keys:KEY._col0
                                              <-Reducer 89 [SIMPLE_EDGE]
                                                SHUFFLE [RS_546]
                                                  PartitionCols:_col0
                                                  Group By Operator [GBY_545] (rows=508200 width=1436)
                                                    Output:["_col0"],keys:_col0
                                                    Merge Join Operator [MERGEJOIN_1444] (rows=508200 width=1436)
                                                      Conds:RS_1705._col1, _col2, _col3=RS_1789._col0, _col1, _col2(Inner),Output:["_col0"]
                                                    <-Map 63 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_1705]
                                                        PartitionCols:_col1, _col2, _col3
                                                        Select Operator [SEL_1688] (rows=462000 width=1436)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1365] (rows=143966864 width=123)
                                                            predicate:(ws_sold_date_sk is not null and ws_item_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_378_date_dim_d_date_sk_min) AND DynamicValue(RS_378_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_378_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_293] (rows=144002668 width=123)
                                                              default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_quantity","ws_list_price"]
                                                            <-Reducer 23 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1364]
                                                                Group By Operator [GBY_1363] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_1297]
                                                                    Group By Operator [GBY_1294] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1291] (rows=50 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1285]
                                            <-Reducer 37 [SIMPLE_EDGE]
                                              SHUFFLE [RS_386]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_384] (rows=364 width=4)
                                                  Output:["_col0"],keys:_col0
                                                  Merge Join Operator [MERGEJOIN_1163] (rows=729 width=4)
                                                    Conds:RS_1329._col1, _col2, _col3=RS_1371._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 24 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1329]
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1320] (rows=458612 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1311] (rows=458612 width=15)
                                                          predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                           Please refer to the previous TableScan [TS_6]
                                                  <-Reducer 36 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1371]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1370] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1369] (rows=1 width=20)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1368] (rows=120960 width=19)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 35 [SIMPLE_EDGE]
                                                            <-Reducer 34 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1412]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1411] (rows=120960 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1410] (rows=120960 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 26 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_322]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_28]
                                                            <-Reducer 41 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1426]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1425] (rows=120960 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1424] (rows=120960 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 38 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_342]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_48]
                                                            <-Reducer 45 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1440]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1439] (rows=120960 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1438] (rows=120960 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 42 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_363]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_69]
                              <-Reducer 63 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1378]
                                  Select Operator [SEL_1377] (rows=1 width=112)
                                    Output:["_col0"]
                                    Filter Operator [FIL_1376] (rows=1 width=120)
                                      predicate:(_col0 is not null and _col1 is not null)
                                      Group By Operator [GBY_1375] (rows=1 width=120)
                                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                      <-Union 62 [CUSTOM_SIMPLE_EDGE]
                                        <-Reducer 61 [CONTAINS]
                                          Reduce Output Operator [RS_1247]
                                            Group By Operator [GBY_1246] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1245] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1243] (rows=14736682 width=0)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1242] (rows=14736682 width=0)
                                                    Conds:RS_1447._col0=RS_1390._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 48 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1390]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1380]
                                                  <-Map 66 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1447]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1444]
                                        <-Reducer 70 [CONTAINS]
                                          Reduce Output Operator [RS_1265]
                                            Group By Operator [GBY_1264] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1263] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1261] (rows=7676736 width=94)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1260] (rows=7676736 width=94)
                                                    Conds:RS_1462._col0=RS_1453._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 71 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1453]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1449]
                                                  <-Map 67 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1462]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1459]
                                        <-Reducer 76 [CONTAINS]
                                          Reduce Output Operator [RS_1283]
                                            Group By Operator [GBY_1282] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                              Select Operator [SEL_1281] (rows=26270325 width=44)
                                                Output:["_col0"]
                                                Select Operator [SEL_1279] (rows=3856907 width=114)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_1278] (rows=3856907 width=114)
                                                    Conds:RS_1477._col0=RS_1468._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 77 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_1468]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1464]
                                                  <-Map 73 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1477]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1474]
                  <-Reducer 6 [CONTAINS]
                    Reduce Output Operator [RS_1179]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_1460] (rows=2032776160 width=237)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Top N Key Operator [TNK_1459] (rows=406555232 width=237)
                          keys:_col0, _col1, _col2, _col3, 0L,sort order:+++++,top n:100
                          Select Operator [SEL_1457] (rows=232318249 width=217)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Filter Operator [FIL_1174] (rows=1 width=244)
                              predicate:(_col3 > _col5)
                              Merge Join Operator [MERGEJOIN_1173] (rows=1 width=244)
                                Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              <-Reducer 5 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1336]
                                  Filter Operator [FIL_1335] (rows=1 width=132)
                                    predicate:_col3 is not null
                                    Group By Operator [GBY_1334] (rows=1 width=132)
                                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 4 [SIMPLE_EDGE]
                                      SHUFFLE [RS_98]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_97] (rows=1 width=132)
                                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                          Select Operator [SEL_95] (rows=1 width=128)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_1167] (rows=1 width=128)
                                              Conds:RS_92._col1=RS_93._col0(Left Semi),Output:["_col2","_col3","_col6","_col7","_col8"]
                                            <-Reducer 25 [SIMPLE_EDGE]
                                              SHUFFLE [RS_93]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_91] (rows=364 width=4)
                                                  Output:["_col0"],keys:_col0
                                                  Merge Join Operator [MERGEJOIN_1139] (rows=729 width=4)
                                                    Conds:RS_1322._col1, _col2, _col3=RS_1333._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 24 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1322]
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1313] (rows=458612 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1304] (rows=458612 width=15)
                                                          predicate:(i_category_id is not null and i_brand_id is not null and i_class_id is not null and i_item_sk is not null)
                                                           Please refer to the previous TableScan [TS_6]
                                                  <-Reducer 29 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1333]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1332] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1331] (rows=1 width=20)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1330] (rows=120960 width=19)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 28 [SIMPLE_EDGE]
                                                            <-Reducer 27 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1406]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1405] (rows=120960 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1404] (rows=120960 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 26 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_29]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_28]
                                                            <-Reducer 39 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1420]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1419] (rows=120960 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1418] (rows=120960 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 38 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_49]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_48]
                                                            <-Reducer 43 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1434]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1433] (rows=120960 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1432] (rows=120960 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 42 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_70]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_69]
                                            <-Reducer 3 [SIMPLE_EDGE]
                                              SHUFFLE [RS_92]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_1132] (rows=15062131 width=15)
                                                  Conds:RS_87._col1=RS_1321._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8"]
                                                <-Map 24 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1321]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_1312] (rows=462000 width=15)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_1303] (rows=462000 width=15)
                                                        predicate:i_item_sk is not null
                                                         Please refer to the previous TableScan [TS_6]
                                                <-Reducer 2 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_87]
                                                    PartitionCols:_col1
                                                    Merge Join Operator [MERGEJOIN_1131] (rows=15062131 width=4)
                                                      Conds:RS_1302._col0=RS_1286._col0(Inner),Output:["_col1","_col2","_col3"]
                                                    <-Map 10 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_1286]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1285]
                                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1302]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1301] (rows=550076554 width=118)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1300] (rows=550076554 width=118)
                                                            predicate:(ss_sold_date_sk is not null and ss_item_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_85_date_dim_d_date_sk_min) AND DynamicValue(RS_85_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_85_date_dim_d_date_sk_bloom_filter)))
                                                            TableScan [TS_0] (rows=575995635 width=118)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_quantity","ss_list_price"]
                                                            <-Reducer 11 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_1299]
                                                                Group By Operator [GBY_1298] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_1295]
                                                                    Group By Operator [GBY_1292] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_1287] (rows=50 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_1285]
                              <-Reducer 56 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1340]
                                  Select Operator [SEL_1339] (rows=1 width=112)
                                    Output:["_col0"]
                                    Group By Operator [GBY_1653] (rows=1 width=120)
                                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                    <-Union 24 [CUSTOM_SIMPLE_EDGE]
                                      <-Reducer 23 [CONTAINS]
                                        Reduce Output Operator [RS_1511]
                                          Group By Operator [GBY_1510] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                            Select Operator [SEL_1509] (rows=1108786976 width=108)
                                              Output:["_col0"]
                                              Select Operator [SEL_1507] (rows=316788826 width=135)
                                                Output:["_col0","_col1"]
                                                Merge Join Operator [MERGEJOIN_1506] (rows=316788826 width=135)
                                                  Conds:RS_1827._col0=RS_1806._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 21 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1806]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1803]
                                                <-Map 47 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1827]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1826]
                                      <-Reducer 39 [CONTAINS]
                                        Reduce Output Operator [RS_1547]
                                          Group By Operator [GBY_1546] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                            Select Operator [SEL_1545] (rows=1108786976 width=108)
                                              Output:["_col0"]
                                              Select Operator [SEL_1543] (rows=158402938 width=135)
                                                Output:["_col0","_col1"]
                                                Merge Join Operator [MERGEJOIN_1542] (rows=158402938 width=135)
                                                  Conds:RS_1855._col0=RS_1834._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 37 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1834]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1831]
                                                <-Map 48 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1855]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1854]
                                      <-Reducer 44 [CONTAINS]
                                        Reduce Output Operator [RS_1565]
                                          Group By Operator [GBY_1564] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                            Select Operator [SEL_1563] (rows=1108786976 width=108)
                                              Output:["_col0"]
                                              Select Operator [SEL_1561] (rows=633595212 width=88)
                                                Output:["_col0","_col1"]
                                                Merge Join Operator [MERGEJOIN_1560] (rows=633595212 width=88)
                                                  Conds:RS_1862._col0=RS_1624._col0(Inner),Output:["_col1","_col2"]
                                                <-Map 102 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1624]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1615]
                                                <-Map 43 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1862]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_1861]
                              <-Reducer 4 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1652]
                                  Select Operator [SEL_1651] (rows=1 width=8)
                                    Filter Operator [FIL_1650] (rows=1 width=8)
                                      predicate:(sq_count_check(_col0) <= 1)
                                      Group By Operator [GBY_1649] (rows=1 width=8)
                                        Output:["_col0"],aggregations:["count()"]
                                        Select Operator [SEL_1648] (rows=1 width=8)
                                          Group By Operator [GBY_1647] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                          <-Union 3 [CUSTOM_SIMPLE_EDGE]
                                            <-Reducer 18 [CONTAINS]
                                              Reduce Output Operator [RS_1493]
                                                Group By Operator [GBY_1492] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count(_col0)"]
                                                  Select Operator [SEL_1491] (rows=1108786976 width=108)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_1489] (rows=316788826 width=135)
                                                      Output:["_col0"]
                                                      Merge Join Operator [MERGEJOIN_1488] (rows=316788826 width=135)
                                                        Conds:RS_1820._col0=RS_1804._col0(Inner),Output:["_col1"]
                                                      <-Map 21 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1804]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1803]
                                                      <-Map 17 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1820]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1819]
                                            <-Reducer 2 [CONTAINS]
                                              Reduce Output Operator [RS_1454]
                                                Group By Operator [GBY_1453] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count(_col0)"]
                                                  Select Operator [SEL_1452] (rows=1108786976 width=108)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_1450] (rows=633595212 width=88)
                                                      Output:["_col0"]
                                                      Merge Join Operator [MERGEJOIN_1449] (rows=633595212 width=88)
                                                        Conds:RS_1644._col0=RS_1622._col0(Inner),Output:["_col1"]
                                                      <-Map 102 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1622]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1615]
                                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1644]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1643]
                                            <-Reducer 34 [CONTAINS]
                                              Reduce Output Operator [RS_1529]
                                                Group By Operator [GBY_1528] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count(_col0)"]
                                                  Select Operator [SEL_1527] (rows=1108786976 width=108)
                                                    Output:["_col0"]
                                                    Select Operator [SEL_1525] (rows=158402938 width=135)
                                                      Output:["_col0"]
                                                      Merge Join Operator [MERGEJOIN_1524] (rows=158402938 width=135)
                                                        Conds:RS_1848._col0=RS_1832._col0(Inner),Output:["_col1"]
                                                      <-Map 37 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1832]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1831]
                                                      <-Map 33 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1848]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1847]
                              <-Reducer 52 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_1737]
                                  Group By Operator [GBY_1736] (rows=696954748 width=88)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 51 [SIMPLE_EDGE]
                                    SHUFFLE [RS_180]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_179] (rows=1393909496 width=88)
                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                        Select Operator [SEL_177] (rows=1393909496 width=88)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Merge Join Operator [MERGEJOIN_1415] (rows=1393909496 width=88)
                                            Conds:RS_173._col1=RS_1697._col0(Inner),RS_173._col1=RS_1727._col0(Inner),Output:["_col2","_col3","_col8","_col9","_col10"]
                                          <-Map 63 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_1697]
                                              PartitionCols:_col0
                                              Select Operator [SEL_1682] (rows=462000 width=1436)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                Filter Operator [FIL_1673] (rows=462000 width=1436)
                                                  predicate:i_item_sk is not null
                                                   Please refer to the previous TableScan [TS_91]
                                          <-Reducer 65 [ONE_TO_ONE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_1727]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_1726] (rows=254100 width=1436)
                                                Output:["_col0"],keys:KEY._col0
                                              <-Reducer 64 [SIMPLE_EDGE]
                                                SHUFFLE [RS_167]
                                                  PartitionCols:_col0
                                                  Group By Operator [GBY_166] (rows=508200 width=1436)
                                                    Output:["_col0"],keys:_col0
                                                    Merge Join Operator [MERGEJOIN_1414] (rows=508200 width=1436)
                                                      Conds:RS_1690._col1, _col2, _col3=RS_1725._col0, _col1, _col2(Inner),Output:["_col0"]
                                                    <-Map 63 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_1690]
                                                        PartitionCols:_col1, _col2, _col3
                                                         Please refer to the previous Select Operator [SEL_1681]
                                                    <-Reducer 70 [ONE_TO_ONE_EDGE] vectorized
                                                      FORWARD [RS_1725]
                                                        PartitionCols:_col0, _col1, _col2
                                                        Select Operator [SEL_1724] (rows=1 width=108)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_1723] (rows=1 width=108)
                                                            predicate:(_col3 = 3L)
                                                            Group By Operator [GBY_1722] (rows=304916424 width=108)
                                                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                            <-Union 69 [SIMPLE_EDGE]
                                                              <-Reducer 68 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1874]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1873] (rows=609832849 width=108)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1872] (rows=348477374 width=88)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 67 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_111]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                        Group By Operator [GBY_110] (rows=696954748 width=88)
                                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col5, _col6, _col7
                                                                          Merge Join Operator [MERGEJOIN_1409] (rows=696954748 width=88)
                                                                            Conds:RS_106._col1=RS_1691._col0(Inner),Output:["_col5","_col6","_col7"]
                                                                          <-Map 63 [SIMPLE_EDGE] vectorized
                                                                            PARTITION_ONLY_SHUFFLE [RS_1691]
                                                                              PartitionCols:_col0
                                                                               Please refer to the previous Select Operator [SEL_1681]
                                                                          <-Reducer 101 [SIMPLE_EDGE]
                                                                            SHUFFLE [RS_106]
                                                                              PartitionCols:_col1
                                                                               Please refer to the previous Merge Join Operator [MERGEJOIN_1408]
                                                              <-Reducer 73 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1884]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1883] (rows=609832849 width=108)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1882] (rows=174233858 width=135)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 72 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_131]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                        Group By Operator [GBY_130] (rows=348467716 width=135)
                                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col5, _col6, _col7
                                                                          Merge Join Operator [MERGEJOIN_1411] (rows=348467716 width=135)
                                                                            Conds:RS_126._col1=RS_1693._col0(Inner),Output:["_col5","_col6","_col7"]
                                                                          <-Map 63 [SIMPLE_EDGE] vectorized
                                                                            PARTITION_ONLY_SHUFFLE [RS_1693]
                                                                              PartitionCols:_col0
                                                                               Please refer to the previous Select Operator [SEL_1681]
                                                                          <-Reducer 104 [SIMPLE_EDGE]
                                                                            SHUFFLE [RS_126]
                                                                              PartitionCols:_col1
                                                                               Please refer to the previous Merge Join Operator [MERGEJOIN_1410]
                                                              <-Reducer 76 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1894]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1893] (rows=609832849 width=108)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1892] (rows=87121617 width=135)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 75 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_152]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                        Group By Operator [GBY_151] (rows=174243235 width=135)
                                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col5, _col6, _col7
                                                                          Merge Join Operator [MERGEJOIN_1413] (rows=174243235 width=135)
                                                                            Conds:RS_147._col1=RS_1695._col0(Inner),Output:["_col5","_col6","_col7"]
                                                                          <-Map 63 [SIMPLE_EDGE] vectorized
                                                                            PARTITION_ONLY_SHUFFLE [RS_1695]
                                                                              PartitionCols:_col0
                                                                               Please refer to the previous Select Operator [SEL_1681]
                                                                          <-Reducer 106 [SIMPLE_EDGE]
                                                                            SHUFFLE [RS_147]
                                                                              PartitionCols:_col1
                                                                               Please refer to the previous Merge Join Operator [MERGEJOIN_1412]
                                          <-Reducer 50 [SIMPLE_EDGE]
                                            SHUFFLE [RS_173]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_1407] (rows=633595212 width=88)
                                                Conds:RS_1735._col0=RS_1658._col0(Inner),Output:["_col1","_col2","_col3"]
                                              <-Map 53 [SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_1658]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_1657]
                                              <-Map 49 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1735]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_1734] (rows=575995635 width=88)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    Filter Operator [FIL_1733] (rows=575995635 width=88)
                                                      predicate:((ss_item_sk BETWEEN DynamicValue(RS_174_item_i_item_sk_min) AND DynamicValue(RS_174_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_174_item_i_item_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_175_item_i_item_sk_min) AND DynamicValue(RS_175_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_175_item_i_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_171_date_dim_d_date_sk_min) AND DynamicValue(RS_171_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_171_date_dim_d_date_sk_bloom_filter))) and ss_item_sk is not null and ss_sold_date_sk is not null)
                                                      TableScan [TS_82] (rows=575995635 width=88)
                                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_quantity","ss_list_price"]
                                                      <-Reducer 54 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_1671]
                                                          Group By Operator [GBY_1670] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 53 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_1667]
                                                              Group By Operator [GBY_1664] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_1659] (rows=18262 width=1119)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_1657]
                                                      <-Reducer 66 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_1732]
                                                          Group By Operator [GBY_1731] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Reducer 65 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_1730]
                                                              Group By Operator [GBY_1729] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_1728] (rows=254100 width=1436)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Group By Operator [GBY_1726]
                                                      <-Reducer 78 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_1721]
                                                          Group By Operator [GBY_1720] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 63 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_1717]
                                                              Group By Operator [GBY_1711] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_1698] (rows=462000 width=1436)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_1682]

