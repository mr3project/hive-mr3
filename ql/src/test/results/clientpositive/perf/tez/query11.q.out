PREHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(ss_ext_list_price-ss_ext_discount_amt) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year 
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(ws_ext_list_price-ws_ext_discount_amt) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select  t_s_secyear.c_preferred_cust_flag
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
         and t_s_firstyear.customer_id = t_w_secyear.customer_id
         and t_s_firstyear.customer_id = t_w_firstyear.customer_id
         and t_s_firstyear.sale_type = 's'
         and t_w_firstyear.sale_type = 'w'
         and t_s_secyear.sale_type = 's'
         and t_w_secyear.sale_type = 'w'
         and t_s_firstyear.dyear = 2001
         and t_s_secyear.dyear = 2001+1
         and t_w_firstyear.dyear = 2001
         and t_w_secyear.dyear = 2001+1
         and t_s_firstyear.year_total > 0
         and t_w_firstyear.year_total > 0
         and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
             > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
 order by t_s_secyear.c_preferred_cust_flag
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(ss_ext_list_price-ss_ext_discount_amt) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year 
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(ws_ext_list_price-ws_ext_discount_amt) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select  t_s_secyear.c_preferred_cust_flag
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
         and t_s_firstyear.customer_id = t_w_secyear.customer_id
         and t_s_firstyear.customer_id = t_w_firstyear.customer_id
         and t_s_firstyear.sale_type = 's'
         and t_w_firstyear.sale_type = 'w'
         and t_s_secyear.sale_type = 's'
         and t_w_secyear.sale_type = 'w'
         and t_s_firstyear.dyear = 2001
         and t_s_secyear.dyear = 2001+1
         and t_w_firstyear.dyear = 2001
         and t_w_secyear.dyear = 2001+1
         and t_s_firstyear.year_total > 0
         and t_w_firstyear.year_total > 0
         and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
             > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
 order by t_s_secyear.c_preferred_cust_flag
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 11 <- Map 10 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 12 <- Map 18 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Map 10 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 15 <- Map 18 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 3 <- Map 18 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 12 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 16 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 20 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_218]
        Limit [LIM_217] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_216] (rows=574987679 width=88)
            Output:["_col0"]
          <-Reducer 5 [SIMPLE_EDGE]
            SHUFFLE [RS_93]
              Select Operator [SEL_92] (rows=574987679 width=88)
                Output:["_col0"]
                Filter Operator [FIL_91] (rows=574987679 width=88)
                  predicate:CASE WHEN (_col3 is not null) THEN (CASE WHEN (_col5 is not null) THEN (((_col1 / _col5) > (_col8 / _col3))) ELSE ((null > (_col8 / _col3))) END) ELSE (CASE WHEN (_col5 is not null) THEN (((_col1 / _col5) > null)) ELSE (null) END) END
                  Merge Join Operator [MERGEJOIN_175] (rows=1149975359 width=88)
                    Conds:RS_198._col0=RS_215._col0(Inner),RS_215._col0=RS_203._col0(Inner),RS_215._col0=RS_210._col0(Inner),Output:["_col1","_col3","_col5","_col7","_col8"]
                  <-Reducer 13 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_210]
                      PartitionCols:_col0
                      Select Operator [SEL_209] (rows=348477374 width=88)
                        Output:["_col0","_col1","_col2"]
                        Group By Operator [GBY_208] (rows=348477374 width=88)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                        <-Reducer 12 [SIMPLE_EDGE]
                          SHUFFLE [RS_83]
                            PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                            Group By Operator [GBY_82] (rows=696954748 width=88)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                              Select Operator [SEL_80] (rows=696954748 width=88)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                Merge Join Operator [MERGEJOIN_174] (rows=696954748 width=88)
                                  Conds:RS_77._col1=RS_192._col0(Inner),Output:["_col2","_col3","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                                <-Map 18 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_192]
                                    PartitionCols:_col0
                                    Select Operator [SEL_191] (rows=80000000 width=860)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                      Filter Operator [FIL_190] (rows=80000000 width=860)
                                        predicate:(c_customer_id is not null and c_customer_sk is not null)
                                        TableScan [TS_71] (rows=80000000 width=860)
                                          default@customer,customer,Tbl:COMPLETE,Col:NONE,Output:["c_customer_sk","c_customer_id","c_first_name","c_last_name","c_preferred_cust_flag","c_birth_country","c_login","c_email_address"]
                                <-Reducer 11 [SIMPLE_EDGE]
                                  SHUFFLE [RS_77]
                                    PartitionCols:_col1
                                    Merge Join Operator [MERGEJOIN_173] (rows=633595212 width=88)
                                      Conds:RS_206._col0=RS_186._col0(Inner),Output:["_col1","_col2","_col3"]
                                    <-Map 17 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_186]
                                        PartitionCols:_col0
                                        Select Operator [SEL_183] (rows=36524 width=1119)
                                          Output:["_col0"]
                                          Filter Operator [FIL_180] (rows=36524 width=1119)
                                            predicate:((d_year = 2002) and d_date_sk is not null)
                                            TableScan [TS_68] (rows=73049 width=1119)
                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year"]
                                    <-Map 10 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_206]
                                        PartitionCols:_col0
                                        Select Operator [SEL_205] (rows=575995635 width=88)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Filter Operator [FIL_204] (rows=575995635 width=88)
                                            predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                            TableScan [TS_65] (rows=575995635 width=88)
                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_discount_amt","ss_ext_list_price"]
                  <-Reducer 16 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_215]
                      PartitionCols:_col0
                      Select Operator [SEL_214] (rows=116159124 width=88)
                        Output:["_col0","_col1"]
                        Filter Operator [FIL_213] (rows=116159124 width=88)
                          predicate:(_col7 > 0)
                          Select Operator [SEL_212] (rows=348477374 width=88)
                            Output:["_col0","_col7"]
                            Group By Operator [GBY_211] (rows=348477374 width=88)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                            <-Reducer 15 [SIMPLE_EDGE]
                              SHUFFLE [RS_39]
                                PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                Group By Operator [GBY_38] (rows=696954748 width=88)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                  Select Operator [SEL_36] (rows=696954748 width=88)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                    Merge Join Operator [MERGEJOIN_170] (rows=696954748 width=88)
                                      Conds:RS_33._col1=RS_194._col0(Inner),Output:["_col2","_col3","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                                    <-Map 18 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_194]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_191]
                                    <-Reducer 14 [SIMPLE_EDGE]
                                      SHUFFLE [RS_33]
                                        PartitionCols:_col1
                                        Merge Join Operator [MERGEJOIN_169] (rows=633595212 width=88)
                                          Conds:RS_207._col0=RS_188._col0(Inner),Output:["_col1","_col2","_col3"]
                                        <-Map 17 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_188]
                                            PartitionCols:_col0
                                            Select Operator [SEL_184] (rows=36524 width=1119)
                                              Output:["_col0"]
                                              Filter Operator [FIL_181] (rows=36524 width=1119)
                                                predicate:((d_year = 2001) and d_date_sk is not null)
                                                 Please refer to the previous TableScan [TS_68]
                                        <-Map 10 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_207]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_205]
                  <-Reducer 4 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_198]
                      PartitionCols:_col0
                      Select Operator [SEL_197] (rows=87121617 width=135)
                        Output:["_col0","_col1"]
                        Group By Operator [GBY_196] (rows=87121617 width=135)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                        <-Reducer 3 [SIMPLE_EDGE]
                          SHUFFLE [RS_18]
                            PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                            Group By Operator [GBY_17] (rows=174243235 width=135)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                              Select Operator [SEL_15] (rows=174243235 width=135)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                Merge Join Operator [MERGEJOIN_168] (rows=174243235 width=135)
                                  Conds:RS_12._col1=RS_193._col0(Inner),Output:["_col2","_col3","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                                <-Map 18 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_193]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_191]
                                <-Reducer 2 [SIMPLE_EDGE]
                                  SHUFFLE [RS_12]
                                    PartitionCols:_col1
                                    Merge Join Operator [MERGEJOIN_167] (rows=158402938 width=135)
                                      Conds:RS_178._col0=RS_187._col0(Inner),Output:["_col1","_col2","_col3"]
                                    <-Map 17 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_187]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_183]
                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_178]
                                        PartitionCols:_col0
                                        Select Operator [SEL_177] (rows=144002668 width=135)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Filter Operator [FIL_176] (rows=144002668 width=135)
                                            predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                            TableScan [TS_0] (rows=144002668 width=135)
                                              default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_ext_discount_amt","ws_ext_list_price"]
                  <-Reducer 9 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_203]
                      PartitionCols:_col0
                      Select Operator [SEL_202] (rows=29040539 width=135)
                        Output:["_col0","_col1"]
                        Filter Operator [FIL_201] (rows=29040539 width=135)
                          predicate:(_col7 > 0)
                          Select Operator [SEL_200] (rows=87121617 width=135)
                            Output:["_col0","_col7"]
                            Group By Operator [GBY_199] (rows=87121617 width=135)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                            <-Reducer 8 [SIMPLE_EDGE]
                              SHUFFLE [RS_61]
                                PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                Group By Operator [GBY_60] (rows=174243235 width=135)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                  Select Operator [SEL_58] (rows=174243235 width=135)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                    Filter Operator [FIL_315] (rows=80000000 width=656)
                                      predicate:(c_customer_sk is not null and c_customer_id is not null)
                                      TableScan [TS_68] (rows=80000000 width=656)
                                        default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_customer_id","c_first_name","c_last_name","c_preferred_cust_flag","c_birth_country","c_login","c_email_address"]
                              <-Reducer 18 [SIMPLE_EDGE]
                                SHUFFLE [RS_74]
                                  PartitionCols:_col1
                                  Merge Join Operator [MERGEJOIN_283] (rows=187573258 width=115)
                                    Conds:RS_348._col0=RS_294._col0(Inner),Output:["_col1","_col2"]
                                  <-Map 21 [SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_294]
                                      PartitionCols:_col0
                                      Select Operator [SEL_291] (rows=652 width=4)
                                        Output:["_col0"]
                                        Filter Operator [FIL_288] (rows=652 width=8)
                                          predicate:((d_year = 2002) and d_date_sk is not null)
                                          TableScan [TS_65] (rows=73049 width=8)
                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                  <-Map 17 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_348]
                                      PartitionCols:_col0
                                      Select Operator [SEL_347] (rows=525327388 width=119)
                                        Output:["_col0","_col1","_col2"]
                                        Filter Operator [FIL_346] (rows=525327388 width=221)
                                          predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_72_date_dim_d_date_sk_min) AND DynamicValue(RS_72_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_72_date_dim_d_date_sk_bloom_filter)))
                                          TableScan [TS_62] (rows=575995635 width=221)
                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_discount_amt","ss_ext_list_price"]
                                          <-Reducer 22 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_345]
                                              Group By Operator [GBY_344] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                              <-Map 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_306]
                                                  Group By Operator [GBY_302] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                    Select Operator [SEL_295] (rows=652 width=4)
                                                      Output:["_col0"]
                                                       Please refer to the previous Select Operator [SEL_291]
                  <-Reducer 6 [SIMPLE_EDGE]
                    SHUFFLE [RS_88]
                      PartitionCols:_col2
                      Merge Join Operator [MERGEJOIN_286] (rows=20485011 width=440)
                        Conds:RS_85._col2=RS_343._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6"]
                      <-Reducer 16 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_343]
                          PartitionCols:_col0
                          Select Operator [SEL_342] (rows=17130654 width=216)
                            Output:["_col0","_col1","_col2"]
                            Filter Operator [FIL_341] (rows=17130654 width=212)
                              predicate:(_col7 > 0)
                              Select Operator [SEL_340] (rows=51391963 width=212)
                                Output:["_col0","_col7"]
                                Group By Operator [GBY_339] (rows=51391963 width=764)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                <-Reducer 15 [SIMPLE_EDGE]
                                  SHUFFLE [RS_58]
                                    PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                    Group By Operator [GBY_57] (rows=51391963 width=764)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col2)"],keys:_col5, _col6, _col7, _col8, _col9, _col10, _col11
                                      Merge Join Operator [MERGEJOIN_282] (rows=51391963 width=764)
                                        Conds:RS_53._col1=RS_320._col0(Inner),Output:["_col2","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                      <-Map 26 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_320]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_316]
                                      <-Reducer 14 [SIMPLE_EDGE]
                                        SHUFFLE [RS_53]
                                          PartitionCols:_col1
                                          Merge Join Operator [MERGEJOIN_281] (rows=51391963 width=115)
                                            Conds:RS_338._col0=RS_300._col0(Inner),Output:["_col1","_col2"]
                                          <-Map 21 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_300]
                                              PartitionCols:_col0
                                              Select Operator [SEL_293] (rows=652 width=4)
                                                Output:["_col0"]
                                                Filter Operator [FIL_290] (rows=652 width=8)
                                                  predicate:((d_year = 2001) and d_date_sk is not null)
                                                   Please refer to the previous TableScan [TS_65]
                                          <-Map 13 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_338]
                                              PartitionCols:_col0
                                              Select Operator [SEL_337] (rows=143930993 width=119)
                                                Output:["_col0","_col1","_col2"]
                                                Filter Operator [FIL_336] (rows=143930993 width=231)
                                                  predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_51_date_dim_d_date_sk_min) AND DynamicValue(RS_51_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_51_date_dim_d_date_sk_bloom_filter)))
                                                  TableScan [TS_41] (rows=144002668 width=231)
                                                    default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_ext_discount_amt","ws_ext_list_price"]
                                                  <-Reducer 25 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_335]
                                                      Group By Operator [GBY_334] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_309]
                                                          Group By Operator [GBY_305] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_301] (rows=652 width=4)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_293]
                      <-Reducer 5 [SIMPLE_EDGE]
                        SHUFFLE [RS_85]
                          PartitionCols:_col2
                          Merge Join Operator [MERGEJOIN_285] (rows=31888273 width=324)
                            Conds:RS_323._col0=RS_333._col0(Inner),Output:["_col1","_col2","_col3"]
                          <-Reducer 12 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_333]
                              PartitionCols:_col0
                              Select Operator [SEL_332] (rows=26666666 width=212)
                                Output:["_col0","_col1"]
                                Filter Operator [FIL_331] (rows=26666666 width=212)
                                  predicate:(_col7 > 0)
                                  Select Operator [SEL_330] (rows=80000000 width=212)
                                    Output:["_col0","_col7"]
                                    Group By Operator [GBY_329] (rows=80000000 width=764)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                    <-Reducer 11 [SIMPLE_EDGE]
                                      SHUFFLE [RS_37]
                                        PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                        Group By Operator [GBY_36] (rows=80000000 width=764)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col2)"],keys:_col5, _col6, _col7, _col8, _col9, _col10, _col11
                                          Merge Join Operator [MERGEJOIN_280] (rows=187573258 width=764)
                                            Conds:RS_32._col1=RS_319._col0(Inner),Output:["_col2","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                          <-Map 26 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_319]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_316]
                                          <-Reducer 10 [SIMPLE_EDGE]
                                            SHUFFLE [RS_32]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_279] (rows=187573258 width=115)
                                                Conds:RS_328._col0=RS_298._col0(Inner),Output:["_col1","_col2"]
                                              <-Map 21 [SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_298]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_292] (rows=652 width=4)
                                                    Output:["_col0"]
                                                    Filter Operator [FIL_289] (rows=652 width=8)
                                                      predicate:((d_year = 2001) and d_date_sk is not null)
                                                       Please refer to the previous TableScan [TS_65]
                                              <-Map 9 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_328]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_327] (rows=525327388 width=119)
                                                    Output:["_col0","_col1","_col2"]
                                                    Filter Operator [FIL_326] (rows=525327388 width=221)
                                                      predicate:(ss_sold_date_sk is not null and ss_customer_sk is not null and ss_sold_date_sk BETWEEN DynamicValue(RS_30_date_dim_d_date_sk_min) AND DynamicValue(RS_30_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_30_date_dim_d_date_sk_bloom_filter)))
                                                      TableScan [TS_20] (rows=575995635 width=221)
                                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_discount_amt","ss_ext_list_price"]
                                                      <-Reducer 24 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_325]
                                                          Group By Operator [GBY_324] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_308]
                                                              Group By Operator [GBY_304] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_299] (rows=652 width=4)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_292]
                          <-Reducer 4 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_323]
                              PartitionCols:_col0
                              Select Operator [SEL_322] (rows=51391963 width=212)
                                Output:["_col0","_col1"]
                                Group By Operator [GBY_321] (rows=51391963 width=764)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                <-Reducer 3 [SIMPLE_EDGE]
                                  SHUFFLE [RS_17]
                                    PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                    Group By Operator [GBY_16] (rows=51391963 width=764)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col2)"],keys:_col5, _col6, _col7, _col8, _col9, _col10, _col11
                                      Merge Join Operator [MERGEJOIN_278] (rows=51391963 width=764)
                                        Conds:RS_12._col1=RS_318._col0(Inner),Output:["_col2","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                      <-Map 26 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_318]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_316]
                                      <-Reducer 2 [SIMPLE_EDGE]
                                        SHUFFLE [RS_12]
                                          PartitionCols:_col1
                                          Merge Join Operator [MERGEJOIN_277] (rows=51391963 width=115)
                                            Conds:RS_314._col0=RS_296._col0(Inner),Output:["_col1","_col2"]
                                          <-Map 21 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_296]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_291]
                                          <-Map 1 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_314]
                                              PartitionCols:_col0
                                              Select Operator [SEL_313] (rows=143930993 width=119)
                                                Output:["_col0","_col1","_col2"]
                                                Filter Operator [FIL_312] (rows=143930993 width=231)
                                                  predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null and ws_sold_date_sk BETWEEN DynamicValue(RS_10_date_dim_d_date_sk_min) AND DynamicValue(RS_10_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_10_date_dim_d_date_sk_bloom_filter)))
                                                  TableScan [TS_0] (rows=144002668 width=231)
                                                    default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_ext_discount_amt","ws_ext_list_price"]
                                                  <-Reducer 23 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_311]
                                                      Group By Operator [GBY_310] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_307]
                                                          Group By Operator [GBY_303] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_297] (rows=652 width=4)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_291]

