PREHOOK: query: explain
select  
   count(distinct cs_order_number) as `order count`
  ,sum(cs_ext_ship_cost) as `total shipping cost`
  ,sum(cs_net_profit) as `total net profit`
from
   catalog_sales cs1
  ,date_dim
  ,customer_address
  ,call_center
where
    d_date between '2001-4-01' and 
           (cast('2001-4-01' as date) + 60 days)
and cs1.cs_ship_date_sk = d_date_sk
and cs1.cs_ship_addr_sk = ca_address_sk
and ca_state = 'NY'
and cs1.cs_call_center_sk = cc_call_center_sk
and cc_county in ('Ziebach County','Levy County','Huron County','Franklin Parish',
                  'Daviess County'
)
and exists (select *
            from catalog_sales cs2
            where cs1.cs_order_number = cs2.cs_order_number
              and cs1.cs_warehouse_sk <> cs2.cs_warehouse_sk)
and not exists(select *
               from catalog_returns cr1
               where cs1.cs_order_number = cr1.cr_order_number)
order by count(distinct cs_order_number)
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@call_center
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  
   count(distinct cs_order_number) as `order count`
  ,sum(cs_ext_ship_cost) as `total shipping cost`
  ,sum(cs_net_profit) as `total net profit`
from
   catalog_sales cs1
  ,date_dim
  ,customer_address
  ,call_center
where
    d_date between '2001-4-01' and 
           (cast('2001-4-01' as date) + 60 days)
and cs1.cs_ship_date_sk = d_date_sk
and cs1.cs_ship_addr_sk = ca_address_sk
and ca_state = 'NY'
and cs1.cs_call_center_sk = cc_call_center_sk
and cc_county in ('Ziebach County','Levy County','Huron County','Franklin Parish',
                  'Daviess County'
)
and exists (select *
            from catalog_sales cs2
            where cs1.cs_order_number = cs2.cs_order_number
              and cs1.cs_warehouse_sk <> cs2.cs_warehouse_sk)
and not exists(select *
               from catalog_returns cr1
               where cs1.cs_order_number = cr1.cr_order_number)
order by count(distinct cs_order_number)
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@call_center
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 15 <- Map 14 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 10 (SIMPLE_EDGE)
Reducer 3 <- Map 11 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 13 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 14 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 16 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 8 vectorized
      File Output Operator [FS_160]
        Group By Operator [GBY_159] (rows=1 width=232)
          Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"]
        <-Reducer 7 [CUSTOM_SIMPLE_EDGE] vectorized
          PARTITION_ONLY_SHUFFLE [RS_158]
            Group By Operator [GBY_157] (rows=1 width=232)
              Output:["_col0","_col1","_col2"],aggregations:["count(_col0)","sum(_col1)","sum(_col2)"]
              Group By Operator [GBY_156] (rows=5150256 width=228)
                Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
              <-Reducer 6 [SIMPLE_EDGE]
                SHUFFLE [RS_70]
                  PartitionCols:_col0
                  Group By Operator [GBY_69] (rows=5150256 width=228)
                    Output:["_col0","_col2","_col3"],aggregations:["sum(_col5)","sum(_col6)"],keys:_col4
                    Select Operator [SEL_42] (rows=5150256 width=214)
                      Output:["_col4","_col5","_col6"]
                      Filter Operator [FIL_41] (rows=5150256 width=214)
                        predicate:_col13 is null
                        Merge Join Operator [MERGEJOIN_126] (rows=10300512 width=214)
                          Conds:RS_38._col4=RS_155._col1(Left Outer),Output:["_col4","_col5","_col6","_col13"]
                        <-Reducer 16 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_155]
                            PartitionCols:_col1
                            Select Operator [SEL_154] (rows=18238808 width=8)
                              Output:["_col0","_col1"]
                              Group By Operator [GBY_153] (rows=18238808 width=4)
                                Output:["_col0"],keys:KEY._col0
                              <-Map 15 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_152]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_151] (rows=28798881 width=4)
                                    Output:["_col0"],keys:cr_order_number
                                    Filter Operator [FIL_150] (rows=28798881 width=4)
                                      predicate:cr_order_number is not null
                                      TableScan [TS_25] (rows=28798881 width=4)
                                        default@catalog_returns,cr1,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_order_number"]
                        <-Reducer 5 [SIMPLE_EDGE]
                          SHUFFLE [RS_38]
                            PartitionCols:_col4
                            Select Operator [SEL_37] (rows=5150256 width=200)
                              Output:["_col4","_col5","_col6"]
                              Filter Operator [FIL_41] (rows=231905279 width=135)
                                predicate:_col14 is null
                                Merge Join Operator [MERGEJOIN_83] (rows=463810558 width=135)
                                  Conds:RS_38._col4=RS_105._col0(Left Outer),Output:["_col4","_col5","_col6","_col14"]
                                <-Reducer 15 [ONE_TO_ONE_EDGE] vectorized
                                  FORWARD [RS_105]
                                    PartitionCols:_col0
                                    Select Operator [SEL_104] (rows=14399440 width=106)
                                      Output:["_col0","_col1"]
                                      Group By Operator [GBY_103] (rows=14399440 width=106)
                                        Output:["_col0"],keys:KEY._col0
                                      <-Map 14 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_102]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_101] (rows=28798881 width=106)
                                            Output:["_col0"],keys:cr_order_number
                                            Filter Operator [FIL_100] (rows=28798881 width=106)
                                              predicate:cr_order_number is not null
                                              TableScan [TS_25] (rows=28798881 width=106)
                                                default@catalog_returns,cr1,Tbl:COMPLETE,Col:NONE,Output:["cr_order_number"]
                                <-Reducer 5 [ONE_TO_ONE_EDGE]
                                  FORWARD [RS_38]
                                    PartitionCols:_col4
                                    Select Operator [SEL_37] (rows=421645953 width=135)
                                      Output:["_col4","_col5","_col6"]
                                      Merge Join Operator [MERGEJOIN_82] (rows=421645953 width=135)
                                        Conds:RS_34._col4=RS_99._col0(Left Semi),Output:["_col3","_col4","_col5","_col6","_col14"],residual filter predicates:{(_col3 <> _col14)}
                                      <-Map 13 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_99]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_98] (rows=287989836 width=135)
                                            Output:["_col0","_col1"],keys:_col0, _col1
                                            Select Operator [SEL_97] (rows=287989836 width=135)
                                              Output:["_col0","_col1"]
                                              Filter Operator [FIL_96] (rows=287989836 width=135)
                                                predicate:(cs_order_number is not null and cs_warehouse_sk is not null)
                                                TableScan [TS_22] (rows=287989836 width=135)
                                                  default@catalog_sales,cs2,Tbl:COMPLETE,Col:NONE,Output:["cs_warehouse_sk","cs_order_number"]
                                      <-Reducer 4 [SIMPLE_EDGE]
                                        SHUFFLE [RS_34]
                                          PartitionCols:_col4
                                          Merge Join Operator [MERGEJOIN_81] (rows=383314495 width=135)
                                            Conds:RS_18._col2=RS_95._col0(Inner),Output:["_col3","_col4","_col5","_col6"]
                                          <-Map 12 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_95]
                                              PartitionCols:_col0
                                              Select Operator [SEL_148] (rows=60 width=2045)
                                                Output:["_col0"]
                                                Filter Operator [FIL_147] (rows=60 width=2045)
                                                  predicate:((cc_county) IN ('Ziebach County', 'Levy County', 'Huron County', 'Franklin Parish', 'Daviess County') and cc_call_center_sk is not null)
                                                  TableScan [TS_9] (rows=60 width=2045)
                                                    default@call_center,call_center,Tbl:COMPLETE,Col:NONE,Output:["cc_call_center_sk","cc_county"]
                                          <-Reducer 3 [SIMPLE_EDGE]
                                            SHUFFLE [RS_18]
                                              PartitionCols:_col2
                                              Merge Join Operator [MERGEJOIN_80] (rows=348467716 width=135)
                                                Conds:RS_15._col1=RS_92._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col6"]
                                              <-Map 11 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_92]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_91] (rows=20000000 width=1014)
                                                    Output:["_col0"]
                                                    Filter Operator [FIL_90] (rows=20000000 width=1014)
                                                      predicate:((ca_state = 'NY') and ca_address_sk is not null)
                                                      TableScan [TS_6] (rows=40000000 width=1014)
                                                        default@customer_address,customer_address,Tbl:COMPLETE,Col:NONE,Output:["ca_address_sk","ca_state"]
                                              <-Reducer 2 [SIMPLE_EDGE]
                                                SHUFFLE [RS_15]
                                                  PartitionCols:_col1
                                                  Merge Join Operator [MERGEJOIN_79] (rows=316788826 width=135)
                                                    Conds:RS_86._col0=RS_89._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_86]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_85] (rows=287989836 width=135)
                                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                                        Filter Operator [FIL_84] (rows=287989836 width=135)
                                                          predicate:(cs_call_center_sk is not null and cs_order_number is not null and cs_ship_addr_sk is not null and cs_ship_date_sk is not null)
                                                          TableScan [TS_0] (rows=287989836 width=135)
                                                            default@catalog_sales,cs1,Tbl:COMPLETE,Col:NONE,Output:["cs_ship_date_sk","cs_ship_addr_sk","cs_call_center_sk","cs_warehouse_sk","cs_order_number","cs_ext_ship_cost","cs_net_profit"]
                                                  <-Map 10 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_89]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_88] (rows=8116 width=1119)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_87] (rows=8116 width=1119)
                                                          predicate:(CAST( d_date AS TIMESTAMP) BETWEEN TIMESTAMP'2001-04-01 00:00:00' AND TIMESTAMP'2001-05-31 00:00:00' and d_date_sk is not null)
                                                          TableScan [TS_3] (rows=73049 width=1119)
                                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_date"]
                                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_157]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_156] (rows=287989836 width=135)
                                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                                        Filter Operator [FIL_155] (rows=287989836 width=135)
                                                          predicate:((cs_call_center_sk BETWEEN DynamicValue(RS_19_call_center_cc_call_center_sk_min) AND DynamicValue(RS_19_call_center_cc_call_center_sk_max) and in_bloom_filter(cs_call_center_sk, DynamicValue(RS_19_call_center_cc_call_center_sk_bloom_filter))) and (cs_ship_addr_sk BETWEEN DynamicValue(RS_16_customer_address_ca_address_sk_min) AND DynamicValue(RS_16_customer_address_ca_address_sk_max) and in_bloom_filter(cs_ship_addr_sk, DynamicValue(RS_16_customer_address_ca_address_sk_bloom_filter))) and (cs_ship_date_sk BETWEEN DynamicValue(RS_13_date_dim_d_date_sk_min) AND DynamicValue(RS_13_date_dim_d_date_sk_max) and in_bloom_filter(cs_ship_date_sk, DynamicValue(RS_13_date_dim_d_date_sk_bloom_filter))) and cs_call_center_sk is not null and cs_order_number is not null and cs_ship_addr_sk is not null and cs_ship_date_sk is not null)
                                                          TableScan [TS_0] (rows=287989836 width=135)
                                                            default@catalog_sales,cs1,Tbl:COMPLETE,Col:NONE,Output:["cs_ship_date_sk","cs_ship_addr_sk","cs_call_center_sk","cs_warehouse_sk","cs_order_number","cs_ext_ship_cost","cs_net_profit"]
                                                          <-Reducer 11 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_138]
                                                              Group By Operator [GBY_137] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_136]
                                                                  Group By Operator [GBY_135] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_134] (rows=8116 width=1119)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_132]
                                                          <-Reducer 13 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_146]
                                                              Group By Operator [GBY_145] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=20000000)"]
                                                              <-Map 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_144]
                                                                  Group By Operator [GBY_143] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=20000000)"]
                                                                    Select Operator [SEL_142] (rows=20000000 width=1014)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_140]
                                                          <-Reducer 15 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_154]
                                                              Group By Operator [GBY_153] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 14 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_152]
                                                                  Group By Operator [GBY_151] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_150] (rows=60 width=2045)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_148]

